#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hospital")]
public partial class HospitalDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertDEPARTAMENT(DEPARTAMENT instance);
  partial void UpdateDEPARTAMENT(DEPARTAMENT instance);
  partial void DeleteDEPARTAMENT(DEPARTAMENT instance);
  partial void InsertUSSER(USSER instance);
  partial void UpdateUSSER(USSER instance);
  partial void DeleteUSSER(USSER instance);
  partial void InsertDISTRICT(DISTRICT instance);
  partial void UpdateDISTRICT(DISTRICT instance);
  partial void DeleteDISTRICT(DISTRICT instance);
  partial void InsertDISTRICT_STREET(DISTRICT_STREET instance);
  partial void UpdateDISTRICT_STREET(DISTRICT_STREET instance);
  partial void DeleteDISTRICT_STREET(DISTRICT_STREET instance);
  partial void InsertMED_PROFESSION(MED_PROFESSION instance);
  partial void UpdateMED_PROFESSION(MED_PROFESSION instance);
  partial void DeleteMED_PROFESSION(MED_PROFESSION instance);
  partial void InsertMEDDISTRICT(MEDDISTRICT instance);
  partial void UpdateMEDDISTRICT(MEDDISTRICT instance);
  partial void DeleteMEDDISTRICT(MEDDISTRICT instance);
  partial void InsertMEDDISTRICT_AGECATEGORY(MEDDISTRICT_AGECATEGORY instance);
  partial void UpdateMEDDISTRICT_AGECATEGORY(MEDDISTRICT_AGECATEGORY instance);
  partial void DeleteMEDDISTRICT_AGECATEGORY(MEDDISTRICT_AGECATEGORY instance);
  partial void InsertMEDORGANIZATION(MEDORGANIZATION instance);
  partial void UpdateMEDORGANIZATION(MEDORGANIZATION instance);
  partial void DeleteMEDORGANIZATION(MEDORGANIZATION instance);
  partial void InsertOFFICE(OFFICE instance);
  partial void UpdateOFFICE(OFFICE instance);
  partial void DeleteOFFICE(OFFICE instance);
  partial void InsertPATIENT(PATIENT instance);
  partial void UpdatePATIENT(PATIENT instance);
  partial void DeletePATIENT(PATIENT instance);
  partial void InsertPERSONAL(PERSONAL instance);
  partial void UpdatePERSONAL(PERSONAL instance);
  partial void DeletePERSONAL(PERSONAL instance);
  partial void InsertPOST(POST instance);
  partial void UpdatePOST(POST instance);
  partial void DeletePOST(POST instance);
  partial void InsertRECEPTION(RECEPTION instance);
  partial void UpdateRECEPTION(RECEPTION instance);
  partial void DeleteRECEPTION(RECEPTION instance);
  partial void InsertREGION(REGION instance);
  partial void UpdateREGION(REGION instance);
  partial void DeleteREGION(REGION instance);
  partial void InsertROLE(ROLE instance);
  partial void UpdateROLE(ROLE instance);
  partial void DeleteROLE(ROLE instance);
  partial void InsertSCHEDULE_DOC(SCHEDULE_DOC instance);
  partial void UpdateSCHEDULE_DOC(SCHEDULE_DOC instance);
  partial void DeleteSCHEDULE_DOC(SCHEDULE_DOC instance);
  partial void InsertSETTLEMENT(SETTLEMENT instance);
  partial void UpdateSETTLEMENT(SETTLEMENT instance);
  partial void DeleteSETTLEMENT(SETTLEMENT instance);
  partial void InsertSTREET(STREET instance);
  partial void UpdateSTREET(STREET instance);
  partial void DeleteSTREET(STREET instance);
  partial void InsertTEMPLATEGRAFTIME(TEMPLATEGRAFTIME instance);
  partial void UpdateTEMPLATEGRAFTIME(TEMPLATEGRAFTIME instance);
  partial void DeleteTEMPLATEGRAFTIME(TEMPLATEGRAFTIME instance);
  #endregion
	
	public HospitalDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HospitalConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public HospitalDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public HospitalDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public HospitalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public HospitalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<DEPARTAMENT> DEPARTAMENTs
	{
		get
		{
			return this.GetTable<DEPARTAMENT>();
		}
	}
	
	public System.Data.Linq.Table<USSER> USSERs
	{
		get
		{
			return this.GetTable<USSER>();
		}
	}
	
	public System.Data.Linq.Table<DISTRICT> DISTRICTs
	{
		get
		{
			return this.GetTable<DISTRICT>();
		}
	}
	
	public System.Data.Linq.Table<DISTRICT_STREET> DISTRICT_STREETs
	{
		get
		{
			return this.GetTable<DISTRICT_STREET>();
		}
	}
	
	public System.Data.Linq.Table<MED_PROFESSION> MED_PROFESSIONs
	{
		get
		{
			return this.GetTable<MED_PROFESSION>();
		}
	}
	
	public System.Data.Linq.Table<MEDDISTRICT> MEDDISTRICTs
	{
		get
		{
			return this.GetTable<MEDDISTRICT>();
		}
	}
	
	public System.Data.Linq.Table<MEDDISTRICT_AGECATEGORY> MEDDISTRICT_AGECATEGORies
	{
		get
		{
			return this.GetTable<MEDDISTRICT_AGECATEGORY>();
		}
	}
	
	public System.Data.Linq.Table<MEDORGANIZATION> MEDORGANIZATIONs
	{
		get
		{
			return this.GetTable<MEDORGANIZATION>();
		}
	}
	
	public System.Data.Linq.Table<OFFICE> OFFICEs
	{
		get
		{
			return this.GetTable<OFFICE>();
		}
	}
	
	public System.Data.Linq.Table<PATIENT> PATIENTs
	{
		get
		{
			return this.GetTable<PATIENT>();
		}
	}
	
	public System.Data.Linq.Table<PERSONAL> PERSONALs
	{
		get
		{
			return this.GetTable<PERSONAL>();
		}
	}
	
	public System.Data.Linq.Table<POST> POSTs
	{
		get
		{
			return this.GetTable<POST>();
		}
	}
	
	public System.Data.Linq.Table<RECEPTION> RECEPTIONs
	{
		get
		{
			return this.GetTable<RECEPTION>();
		}
	}
	
	public System.Data.Linq.Table<REGION> REGIONs
	{
		get
		{
			return this.GetTable<REGION>();
		}
	}
	
	public System.Data.Linq.Table<ROLE> ROLEs
	{
		get
		{
			return this.GetTable<ROLE>();
		}
	}
	
	public System.Data.Linq.Table<SCHEDULE_DOC> SCHEDULE_DOCs
	{
		get
		{
			return this.GetTable<SCHEDULE_DOC>();
		}
	}
	
	public System.Data.Linq.Table<SETTLEMENT> SETTLEMENTs
	{
		get
		{
			return this.GetTable<SETTLEMENT>();
		}
	}
	
	public System.Data.Linq.Table<STREET> STREETs
	{
		get
		{
			return this.GetTable<STREET>();
		}
	}
	
	public System.Data.Linq.Table<TEMPLATEGRAFTIME> TEMPLATEGRAFTIMEs
	{
		get
		{
			return this.GetTable<TEMPLATEGRAFTIME>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEPARTAMENT")]
public partial class DEPARTAMENT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DEPART_ID;
	
	private int _MEDORG_ID;
	
	private string _DEPART_NAME;
	
	private EntitySet<OFFICE> _OFFICEs;
	
	private EntitySet<POST> _POSTs;
	
	private EntityRef<MEDORGANIZATION> _MEDORGANIZATION;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDEPART_IDChanging(int value);
    partial void OnDEPART_IDChanged();
    partial void OnMEDORG_IDChanging(int value);
    partial void OnMEDORG_IDChanged();
    partial void OnDEPART_NAMEChanging(string value);
    partial void OnDEPART_NAMEChanged();
    #endregion
	
	public DEPARTAMENT()
	{
		this._OFFICEs = new EntitySet<OFFICE>(new Action<OFFICE>(this.attach_OFFICEs), new Action<OFFICE>(this.detach_OFFICEs));
		this._POSTs = new EntitySet<POST>(new Action<POST>(this.attach_POSTs), new Action<POST>(this.detach_POSTs));
		this._MEDORGANIZATION = default(EntityRef<MEDORGANIZATION>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPART_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DEPART_ID
	{
		get
		{
			return this._DEPART_ID;
		}
		set
		{
			if ((this._DEPART_ID != value))
			{
				this.OnDEPART_IDChanging(value);
				this.SendPropertyChanging();
				this._DEPART_ID = value;
				this.SendPropertyChanged("DEPART_ID");
				this.OnDEPART_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDORG_ID", DbType="Int NOT NULL")]
	public int MEDORG_ID
	{
		get
		{
			return this._MEDORG_ID;
		}
		set
		{
			if ((this._MEDORG_ID != value))
			{
				if (this._MEDORGANIZATION.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMEDORG_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDORG_ID = value;
				this.SendPropertyChanged("MEDORG_ID");
				this.OnMEDORG_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPART_NAME", DbType="VarChar(20)")]
	public string DEPART_NAME
	{
		get
		{
			return this._DEPART_NAME;
		}
		set
		{
			if ((this._DEPART_NAME != value))
			{
				this.OnDEPART_NAMEChanging(value);
				this.SendPropertyChanging();
				this._DEPART_NAME = value;
				this.SendPropertyChanged("DEPART_NAME");
				this.OnDEPART_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTAMENT_OFFICE", Storage="_OFFICEs", ThisKey="DEPART_ID", OtherKey="DEPART_ID")]
	public EntitySet<OFFICE> OFFICEs
	{
		get
		{
			return this._OFFICEs;
		}
		set
		{
			this._OFFICEs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTAMENT_POST", Storage="_POSTs", ThisKey="DEPART_ID", OtherKey="DEPART_ID")]
	public EntitySet<POST> POSTs
	{
		get
		{
			return this._POSTs;
		}
		set
		{
			this._POSTs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDORGANIZATION_DEPARTAMENT", Storage="_MEDORGANIZATION", ThisKey="MEDORG_ID", OtherKey="MEDORG_ID", IsForeignKey=true)]
	public MEDORGANIZATION MEDORGANIZATION
	{
		get
		{
			return this._MEDORGANIZATION.Entity;
		}
		set
		{
			MEDORGANIZATION previousValue = this._MEDORGANIZATION.Entity;
			if (((previousValue != value) 
						|| (this._MEDORGANIZATION.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MEDORGANIZATION.Entity = null;
					previousValue.DEPARTAMENTs.Remove(this);
				}
				this._MEDORGANIZATION.Entity = value;
				if ((value != null))
				{
					value.DEPARTAMENTs.Add(this);
					this._MEDORG_ID = value.MEDORG_ID;
				}
				else
				{
					this._MEDORG_ID = default(int);
				}
				this.SendPropertyChanged("MEDORGANIZATION");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OFFICEs(OFFICE entity)
	{
		this.SendPropertyChanging();
		entity.DEPARTAMENT = this;
	}
	
	private void detach_OFFICEs(OFFICE entity)
	{
		this.SendPropertyChanging();
		entity.DEPARTAMENT = null;
	}
	
	private void attach_POSTs(POST entity)
	{
		this.SendPropertyChanging();
		entity.DEPARTAMENT = this;
	}
	
	private void detach_POSTs(POST entity)
	{
		this.SendPropertyChanging();
		entity.DEPARTAMENT = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USSER")]
public partial class USSER : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _US_ID;
	
	private string _LOGIN;
	
	private string _PASSWORD;
	
	private int _PATIENT_ID;
	
	private System.Nullable<System.DateTime> _ACTIVATEDDATE;
	
	private System.Nullable<System.DateTime> _ADDEDDATE;
	
	private System.Nullable<System.DateTime> _LASTVISITDATE;
	
	private int _ROLE_ID;
	
	private EntityRef<PATIENT> _PATIENT;
	
	private EntityRef<ROLE> _ROLE;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUS_IDChanging(int value);
    partial void OnUS_IDChanged();
    partial void OnLOGINChanging(string value);
    partial void OnLOGINChanged();
    partial void OnPASSWORDChanging(string value);
    partial void OnPASSWORDChanged();
    partial void OnPATIENT_IDChanging(int value);
    partial void OnPATIENT_IDChanged();
    partial void OnACTIVATEDDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnACTIVATEDDATEChanged();
    partial void OnADDEDDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnADDEDDATEChanged();
    partial void OnLASTVISITDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnLASTVISITDATEChanged();
    partial void OnROLE_IDChanging(int value);
    partial void OnROLE_IDChanged();
    #endregion
	
	public USSER()
	{
		this._PATIENT = default(EntityRef<PATIENT>);
		this._ROLE = default(EntityRef<ROLE>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_US_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int US_ID
	{
		get
		{
			return this._US_ID;
		}
		set
		{
			if ((this._US_ID != value))
			{
				this.OnUS_IDChanging(value);
				this.SendPropertyChanging();
				this._US_ID = value;
				this.SendPropertyChanged("US_ID");
				this.OnUS_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOGIN", DbType="VarChar(20)")]
	public string LOGIN
	{
		get
		{
			return this._LOGIN;
		}
		set
		{
			if ((this._LOGIN != value))
			{
				this.OnLOGINChanging(value);
				this.SendPropertyChanging();
				this._LOGIN = value;
				this.SendPropertyChanged("LOGIN");
				this.OnLOGINChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORD", DbType="VarChar(20)")]
	public string PASSWORD
	{
		get
		{
			return this._PASSWORD;
		}
		set
		{
			if ((this._PASSWORD != value))
			{
				this.OnPASSWORDChanging(value);
				this.SendPropertyChanging();
				this._PASSWORD = value;
				this.SendPropertyChanged("PASSWORD");
				this.OnPASSWORDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PATIENT_ID", DbType="Int NOT NULL")]
	public int PATIENT_ID
	{
		get
		{
			return this._PATIENT_ID;
		}
		set
		{
			if ((this._PATIENT_ID != value))
			{
				if (this._PATIENT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPATIENT_IDChanging(value);
				this.SendPropertyChanging();
				this._PATIENT_ID = value;
				this.SendPropertyChanged("PATIENT_ID");
				this.OnPATIENT_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTIVATEDDATE", DbType="DateTime")]
	public System.Nullable<System.DateTime> ACTIVATEDDATE
	{
		get
		{
			return this._ACTIVATEDDATE;
		}
		set
		{
			if ((this._ACTIVATEDDATE != value))
			{
				this.OnACTIVATEDDATEChanging(value);
				this.SendPropertyChanging();
				this._ACTIVATEDDATE = value;
				this.SendPropertyChanged("ACTIVATEDDATE");
				this.OnACTIVATEDDATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDEDDATE", DbType="DateTime")]
	public System.Nullable<System.DateTime> ADDEDDATE
	{
		get
		{
			return this._ADDEDDATE;
		}
		set
		{
			if ((this._ADDEDDATE != value))
			{
				this.OnADDEDDATEChanging(value);
				this.SendPropertyChanging();
				this._ADDEDDATE = value;
				this.SendPropertyChanged("ADDEDDATE");
				this.OnADDEDDATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LASTVISITDATE", DbType="DateTime")]
	public System.Nullable<System.DateTime> LASTVISITDATE
	{
		get
		{
			return this._LASTVISITDATE;
		}
		set
		{
			if ((this._LASTVISITDATE != value))
			{
				this.OnLASTVISITDATEChanging(value);
				this.SendPropertyChanging();
				this._LASTVISITDATE = value;
				this.SendPropertyChanged("LASTVISITDATE");
				this.OnLASTVISITDATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROLE_ID", DbType="Int NOT NULL")]
	public int ROLE_ID
	{
		get
		{
			return this._ROLE_ID;
		}
		set
		{
			if ((this._ROLE_ID != value))
			{
				if (this._ROLE.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnROLE_IDChanging(value);
				this.SendPropertyChanging();
				this._ROLE_ID = value;
				this.SendPropertyChanged("ROLE_ID");
				this.OnROLE_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PATIENT_USSER", Storage="_PATIENT", ThisKey="PATIENT_ID", OtherKey="PATIENT_ID", IsForeignKey=true)]
	public PATIENT PATIENT
	{
		get
		{
			return this._PATIENT.Entity;
		}
		set
		{
			PATIENT previousValue = this._PATIENT.Entity;
			if (((previousValue != value) 
						|| (this._PATIENT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PATIENT.Entity = null;
					previousValue.USSERs.Remove(this);
				}
				this._PATIENT.Entity = value;
				if ((value != null))
				{
					value.USSERs.Add(this);
					this._PATIENT_ID = value.PATIENT_ID;
				}
				else
				{
					this._PATIENT_ID = default(int);
				}
				this.SendPropertyChanged("PATIENT");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLE_USSER", Storage="_ROLE", ThisKey="ROLE_ID", OtherKey="ROLE_ID", IsForeignKey=true)]
	public ROLE ROLE
	{
		get
		{
			return this._ROLE.Entity;
		}
		set
		{
			ROLE previousValue = this._ROLE.Entity;
			if (((previousValue != value) 
						|| (this._ROLE.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ROLE.Entity = null;
					previousValue.USSERs.Remove(this);
				}
				this._ROLE.Entity = value;
				if ((value != null))
				{
					value.USSERs.Add(this);
					this._ROLE_ID = value.ROLE_ID;
				}
				else
				{
					this._ROLE_ID = default(int);
				}
				this.SendPropertyChanged("ROLE");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISTRICT")]
public partial class DISTRICT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DISTR_ID;
	
	private string _DISTR_NAME;
	
	private int _REG_ID;
	
	private EntitySet<PATIENT> _PATIENTs;
	
	private EntitySet<SETTLEMENT> _SETTLEMENTs;
	
	private EntityRef<REGION> _REGION;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDISTR_IDChanging(int value);
    partial void OnDISTR_IDChanged();
    partial void OnDISTR_NAMEChanging(string value);
    partial void OnDISTR_NAMEChanged();
    partial void OnREG_IDChanging(int value);
    partial void OnREG_IDChanged();
    #endregion
	
	public DISTRICT()
	{
		this._PATIENTs = new EntitySet<PATIENT>(new Action<PATIENT>(this.attach_PATIENTs), new Action<PATIENT>(this.detach_PATIENTs));
		this._SETTLEMENTs = new EntitySet<SETTLEMENT>(new Action<SETTLEMENT>(this.attach_SETTLEMENTs), new Action<SETTLEMENT>(this.detach_SETTLEMENTs));
		this._REGION = default(EntityRef<REGION>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISTR_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DISTR_ID
	{
		get
		{
			return this._DISTR_ID;
		}
		set
		{
			if ((this._DISTR_ID != value))
			{
				this.OnDISTR_IDChanging(value);
				this.SendPropertyChanging();
				this._DISTR_ID = value;
				this.SendPropertyChanged("DISTR_ID");
				this.OnDISTR_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISTR_NAME", DbType="VarChar(50)")]
	public string DISTR_NAME
	{
		get
		{
			return this._DISTR_NAME;
		}
		set
		{
			if ((this._DISTR_NAME != value))
			{
				this.OnDISTR_NAMEChanging(value);
				this.SendPropertyChanging();
				this._DISTR_NAME = value;
				this.SendPropertyChanged("DISTR_NAME");
				this.OnDISTR_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REG_ID", DbType="Int NOT NULL")]
	public int REG_ID
	{
		get
		{
			return this._REG_ID;
		}
		set
		{
			if ((this._REG_ID != value))
			{
				if (this._REGION.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnREG_IDChanging(value);
				this.SendPropertyChanging();
				this._REG_ID = value;
				this.SendPropertyChanged("REG_ID");
				this.OnREG_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_PATIENT", Storage="_PATIENTs", ThisKey="DISTR_ID", OtherKey="DISTR_ID")]
	public EntitySet<PATIENT> PATIENTs
	{
		get
		{
			return this._PATIENTs;
		}
		set
		{
			this._PATIENTs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_SETTLEMENT", Storage="_SETTLEMENTs", ThisKey="DISTR_ID", OtherKey="DISTR_ID")]
	public EntitySet<SETTLEMENT> SETTLEMENTs
	{
		get
		{
			return this._SETTLEMENTs;
		}
		set
		{
			this._SETTLEMENTs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REGION_DISTRICT", Storage="_REGION", ThisKey="REG_ID", OtherKey="REG_ID", IsForeignKey=true)]
	public REGION REGION
	{
		get
		{
			return this._REGION.Entity;
		}
		set
		{
			REGION previousValue = this._REGION.Entity;
			if (((previousValue != value) 
						|| (this._REGION.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._REGION.Entity = null;
					previousValue.DISTRICTs.Remove(this);
				}
				this._REGION.Entity = value;
				if ((value != null))
				{
					value.DISTRICTs.Add(this);
					this._REG_ID = value.REG_ID;
				}
				else
				{
					this._REG_ID = default(int);
				}
				this.SendPropertyChanged("REGION");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PATIENTs(PATIENT entity)
	{
		this.SendPropertyChanging();
		entity.DISTRICT = this;
	}
	
	private void detach_PATIENTs(PATIENT entity)
	{
		this.SendPropertyChanging();
		entity.DISTRICT = null;
	}
	
	private void attach_SETTLEMENTs(SETTLEMENT entity)
	{
		this.SendPropertyChanging();
		entity.DISTRICT = this;
	}
	
	private void detach_SETTLEMENTs(SETTLEMENT entity)
	{
		this.SendPropertyChanging();
		entity.DISTRICT = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISTRICT_STREET")]
public partial class DISTRICT_STREET : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _STREET_ID;
	
	private int _MEDDISTRICT_AGECATEGORY_ID;
	
	private int _DISTRICT_STREET_ID;
	
	private string _NUM_STREET;
	
	private EntityRef<MEDDISTRICT_AGECATEGORY> _MEDDISTRICT_AGECATEGORY;
	
	private EntityRef<STREET> _STREET;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTREET_IDChanging(int value);
    partial void OnSTREET_IDChanged();
    partial void OnMEDDISTRICT_AGECATEGORY_IDChanging(int value);
    partial void OnMEDDISTRICT_AGECATEGORY_IDChanged();
    partial void OnDISTRICT_STREET_IDChanging(int value);
    partial void OnDISTRICT_STREET_IDChanged();
    partial void OnNUM_STREETChanging(string value);
    partial void OnNUM_STREETChanged();
    #endregion
	
	public DISTRICT_STREET()
	{
		this._MEDDISTRICT_AGECATEGORY = default(EntityRef<MEDDISTRICT_AGECATEGORY>);
		this._STREET = default(EntityRef<STREET>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREET_ID", DbType="Int NOT NULL")]
	public int STREET_ID
	{
		get
		{
			return this._STREET_ID;
		}
		set
		{
			if ((this._STREET_ID != value))
			{
				if (this._STREET.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSTREET_IDChanging(value);
				this.SendPropertyChanging();
				this._STREET_ID = value;
				this.SendPropertyChanged("STREET_ID");
				this.OnSTREET_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDDISTRICT_AGECATEGORY_ID", DbType="Int NOT NULL")]
	public int MEDDISTRICT_AGECATEGORY_ID
	{
		get
		{
			return this._MEDDISTRICT_AGECATEGORY_ID;
		}
		set
		{
			if ((this._MEDDISTRICT_AGECATEGORY_ID != value))
			{
				if (this._MEDDISTRICT_AGECATEGORY.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMEDDISTRICT_AGECATEGORY_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDDISTRICT_AGECATEGORY_ID = value;
				this.SendPropertyChanged("MEDDISTRICT_AGECATEGORY_ID");
				this.OnMEDDISTRICT_AGECATEGORY_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISTRICT_STREET_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DISTRICT_STREET_ID
	{
		get
		{
			return this._DISTRICT_STREET_ID;
		}
		set
		{
			if ((this._DISTRICT_STREET_ID != value))
			{
				this.OnDISTRICT_STREET_IDChanging(value);
				this.SendPropertyChanging();
				this._DISTRICT_STREET_ID = value;
				this.SendPropertyChanged("DISTRICT_STREET_ID");
				this.OnDISTRICT_STREET_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUM_STREET", DbType="VarChar(20)")]
	public string NUM_STREET
	{
		get
		{
			return this._NUM_STREET;
		}
		set
		{
			if ((this._NUM_STREET != value))
			{
				this.OnNUM_STREETChanging(value);
				this.SendPropertyChanging();
				this._NUM_STREET = value;
				this.SendPropertyChanged("NUM_STREET");
				this.OnNUM_STREETChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDDISTRICT_AGECATEGORY_DISTRICT_STREET", Storage="_MEDDISTRICT_AGECATEGORY", ThisKey="MEDDISTRICT_AGECATEGORY_ID", OtherKey="MEDDISTRICT_AGECATEGORY_ID", IsForeignKey=true)]
	public MEDDISTRICT_AGECATEGORY MEDDISTRICT_AGECATEGORY
	{
		get
		{
			return this._MEDDISTRICT_AGECATEGORY.Entity;
		}
		set
		{
			MEDDISTRICT_AGECATEGORY previousValue = this._MEDDISTRICT_AGECATEGORY.Entity;
			if (((previousValue != value) 
						|| (this._MEDDISTRICT_AGECATEGORY.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MEDDISTRICT_AGECATEGORY.Entity = null;
					previousValue.DISTRICT_STREETs.Remove(this);
				}
				this._MEDDISTRICT_AGECATEGORY.Entity = value;
				if ((value != null))
				{
					value.DISTRICT_STREETs.Add(this);
					this._MEDDISTRICT_AGECATEGORY_ID = value.MEDDISTRICT_AGECATEGORY_ID;
				}
				else
				{
					this._MEDDISTRICT_AGECATEGORY_ID = default(int);
				}
				this.SendPropertyChanged("MEDDISTRICT_AGECATEGORY");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_DISTRICT_STREET", Storage="_STREET", ThisKey="STREET_ID", OtherKey="STREET_ID", IsForeignKey=true)]
	public STREET STREET
	{
		get
		{
			return this._STREET.Entity;
		}
		set
		{
			STREET previousValue = this._STREET.Entity;
			if (((previousValue != value) 
						|| (this._STREET.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._STREET.Entity = null;
					previousValue.DISTRICT_STREETs.Remove(this);
				}
				this._STREET.Entity = value;
				if ((value != null))
				{
					value.DISTRICT_STREETs.Add(this);
					this._STREET_ID = value.STREET_ID;
				}
				else
				{
					this._STREET_ID = default(int);
				}
				this.SendPropertyChanged("STREET");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MED_PROFESSION")]
public partial class MED_PROFESSION : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MEDPROF_ID;
	
	private string _MEDPROF_NAME;
	
	private EntitySet<POST> _POSTs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMEDPROF_IDChanging(int value);
    partial void OnMEDPROF_IDChanged();
    partial void OnMEDPROF_NAMEChanging(string value);
    partial void OnMEDPROF_NAMEChanged();
    #endregion
	
	public MED_PROFESSION()
	{
		this._POSTs = new EntitySet<POST>(new Action<POST>(this.attach_POSTs), new Action<POST>(this.detach_POSTs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDPROF_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MEDPROF_ID
	{
		get
		{
			return this._MEDPROF_ID;
		}
		set
		{
			if ((this._MEDPROF_ID != value))
			{
				this.OnMEDPROF_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDPROF_ID = value;
				this.SendPropertyChanged("MEDPROF_ID");
				this.OnMEDPROF_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDPROF_NAME", DbType="VarChar(20)")]
	public string MEDPROF_NAME
	{
		get
		{
			return this._MEDPROF_NAME;
		}
		set
		{
			if ((this._MEDPROF_NAME != value))
			{
				this.OnMEDPROF_NAMEChanging(value);
				this.SendPropertyChanging();
				this._MEDPROF_NAME = value;
				this.SendPropertyChanged("MEDPROF_NAME");
				this.OnMEDPROF_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MED_PROFESSION_POST", Storage="_POSTs", ThisKey="MEDPROF_ID", OtherKey="MEDPROF_ID")]
	public EntitySet<POST> POSTs
	{
		get
		{
			return this._POSTs;
		}
		set
		{
			this._POSTs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_POSTs(POST entity)
	{
		this.SendPropertyChanging();
		entity.MED_PROFESSION = this;
	}
	
	private void detach_POSTs(POST entity)
	{
		this.SendPropertyChanging();
		entity.MED_PROFESSION = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MEDDISTRICT")]
public partial class MEDDISTRICT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MEDDISTRICT_ID;
	
	private string _AGECATEGORY;
	
	private int _POST_ID;
	
	private string _MEDDISTRICT_NAME;
	
	private EntitySet<MEDDISTRICT_AGECATEGORY> _MEDDISTRICT_AGECATEGORies;
	
	private EntitySet<PATIENT> _PATIENTs;
	
	private EntityRef<POST> _POST;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMEDDISTRICT_IDChanging(int value);
    partial void OnMEDDISTRICT_IDChanged();
    partial void OnAGECATEGORYChanging(string value);
    partial void OnAGECATEGORYChanged();
    partial void OnPOST_IDChanging(int value);
    partial void OnPOST_IDChanged();
    partial void OnMEDDISTRICT_NAMEChanging(string value);
    partial void OnMEDDISTRICT_NAMEChanged();
    #endregion
	
	public MEDDISTRICT()
	{
		this._MEDDISTRICT_AGECATEGORies = new EntitySet<MEDDISTRICT_AGECATEGORY>(new Action<MEDDISTRICT_AGECATEGORY>(this.attach_MEDDISTRICT_AGECATEGORies), new Action<MEDDISTRICT_AGECATEGORY>(this.detach_MEDDISTRICT_AGECATEGORies));
		this._PATIENTs = new EntitySet<PATIENT>(new Action<PATIENT>(this.attach_PATIENTs), new Action<PATIENT>(this.detach_PATIENTs));
		this._POST = default(EntityRef<POST>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDDISTRICT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MEDDISTRICT_ID
	{
		get
		{
			return this._MEDDISTRICT_ID;
		}
		set
		{
			if ((this._MEDDISTRICT_ID != value))
			{
				this.OnMEDDISTRICT_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDDISTRICT_ID = value;
				this.SendPropertyChanged("MEDDISTRICT_ID");
				this.OnMEDDISTRICT_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AGECATEGORY", DbType="Char(20)")]
	public string AGECATEGORY
	{
		get
		{
			return this._AGECATEGORY;
		}
		set
		{
			if ((this._AGECATEGORY != value))
			{
				this.OnAGECATEGORYChanging(value);
				this.SendPropertyChanging();
				this._AGECATEGORY = value;
				this.SendPropertyChanged("AGECATEGORY");
				this.OnAGECATEGORYChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POST_ID", DbType="Int NOT NULL")]
	public int POST_ID
	{
		get
		{
			return this._POST_ID;
		}
		set
		{
			if ((this._POST_ID != value))
			{
				if (this._POST.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPOST_IDChanging(value);
				this.SendPropertyChanging();
				this._POST_ID = value;
				this.SendPropertyChanged("POST_ID");
				this.OnPOST_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDDISTRICT_NAME", DbType="VarChar(20)")]
	public string MEDDISTRICT_NAME
	{
		get
		{
			return this._MEDDISTRICT_NAME;
		}
		set
		{
			if ((this._MEDDISTRICT_NAME != value))
			{
				this.OnMEDDISTRICT_NAMEChanging(value);
				this.SendPropertyChanging();
				this._MEDDISTRICT_NAME = value;
				this.SendPropertyChanged("MEDDISTRICT_NAME");
				this.OnMEDDISTRICT_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDDISTRICT_MEDDISTRICT_AGECATEGORY", Storage="_MEDDISTRICT_AGECATEGORies", ThisKey="MEDDISTRICT_ID", OtherKey="MEDDISTRICT_ID")]
	public EntitySet<MEDDISTRICT_AGECATEGORY> MEDDISTRICT_AGECATEGORies
	{
		get
		{
			return this._MEDDISTRICT_AGECATEGORies;
		}
		set
		{
			this._MEDDISTRICT_AGECATEGORies.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDDISTRICT_PATIENT", Storage="_PATIENTs", ThisKey="MEDDISTRICT_ID", OtherKey="MEDDISTRICT_ID")]
	public EntitySet<PATIENT> PATIENTs
	{
		get
		{
			return this._PATIENTs;
		}
		set
		{
			this._PATIENTs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POST_MEDDISTRICT", Storage="_POST", ThisKey="POST_ID", OtherKey="POST_ID", IsForeignKey=true)]
	public POST POST
	{
		get
		{
			return this._POST.Entity;
		}
		set
		{
			POST previousValue = this._POST.Entity;
			if (((previousValue != value) 
						|| (this._POST.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._POST.Entity = null;
					previousValue.MEDDISTRICTs.Remove(this);
				}
				this._POST.Entity = value;
				if ((value != null))
				{
					value.MEDDISTRICTs.Add(this);
					this._POST_ID = value.POST_ID;
				}
				else
				{
					this._POST_ID = default(int);
				}
				this.SendPropertyChanged("POST");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MEDDISTRICT_AGECATEGORies(MEDDISTRICT_AGECATEGORY entity)
	{
		this.SendPropertyChanging();
		entity.MEDDISTRICT = this;
	}
	
	private void detach_MEDDISTRICT_AGECATEGORies(MEDDISTRICT_AGECATEGORY entity)
	{
		this.SendPropertyChanging();
		entity.MEDDISTRICT = null;
	}
	
	private void attach_PATIENTs(PATIENT entity)
	{
		this.SendPropertyChanging();
		entity.MEDDISTRICT = this;
	}
	
	private void detach_PATIENTs(PATIENT entity)
	{
		this.SendPropertyChanging();
		entity.MEDDISTRICT = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MEDDISTRICT_AGECATEGORY")]
public partial class MEDDISTRICT_AGECATEGORY : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MEDDISTRICT_ID;
	
	private int _MEDDISTRICT_AGECATEGORY_ID;
	
	private System.Nullable<int> _START_AGE;
	
	private System.Nullable<int> _STOP_AGE;
	
	private EntitySet<DISTRICT_STREET> _DISTRICT_STREETs;
	
	private EntityRef<MEDDISTRICT> _MEDDISTRICT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMEDDISTRICT_IDChanging(int value);
    partial void OnMEDDISTRICT_IDChanged();
    partial void OnMEDDISTRICT_AGECATEGORY_IDChanging(int value);
    partial void OnMEDDISTRICT_AGECATEGORY_IDChanged();
    partial void OnSTART_AGEChanging(System.Nullable<int> value);
    partial void OnSTART_AGEChanged();
    partial void OnSTOP_AGEChanging(System.Nullable<int> value);
    partial void OnSTOP_AGEChanged();
    #endregion
	
	public MEDDISTRICT_AGECATEGORY()
	{
		this._DISTRICT_STREETs = new EntitySet<DISTRICT_STREET>(new Action<DISTRICT_STREET>(this.attach_DISTRICT_STREETs), new Action<DISTRICT_STREET>(this.detach_DISTRICT_STREETs));
		this._MEDDISTRICT = default(EntityRef<MEDDISTRICT>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDDISTRICT_ID", DbType="Int NOT NULL")]
	public int MEDDISTRICT_ID
	{
		get
		{
			return this._MEDDISTRICT_ID;
		}
		set
		{
			if ((this._MEDDISTRICT_ID != value))
			{
				if (this._MEDDISTRICT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMEDDISTRICT_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDDISTRICT_ID = value;
				this.SendPropertyChanged("MEDDISTRICT_ID");
				this.OnMEDDISTRICT_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDDISTRICT_AGECATEGORY_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MEDDISTRICT_AGECATEGORY_ID
	{
		get
		{
			return this._MEDDISTRICT_AGECATEGORY_ID;
		}
		set
		{
			if ((this._MEDDISTRICT_AGECATEGORY_ID != value))
			{
				this.OnMEDDISTRICT_AGECATEGORY_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDDISTRICT_AGECATEGORY_ID = value;
				this.SendPropertyChanged("MEDDISTRICT_AGECATEGORY_ID");
				this.OnMEDDISTRICT_AGECATEGORY_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_START_AGE", DbType="Int")]
	public System.Nullable<int> START_AGE
	{
		get
		{
			return this._START_AGE;
		}
		set
		{
			if ((this._START_AGE != value))
			{
				this.OnSTART_AGEChanging(value);
				this.SendPropertyChanging();
				this._START_AGE = value;
				this.SendPropertyChanged("START_AGE");
				this.OnSTART_AGEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOP_AGE", DbType="Int")]
	public System.Nullable<int> STOP_AGE
	{
		get
		{
			return this._STOP_AGE;
		}
		set
		{
			if ((this._STOP_AGE != value))
			{
				this.OnSTOP_AGEChanging(value);
				this.SendPropertyChanging();
				this._STOP_AGE = value;
				this.SendPropertyChanged("STOP_AGE");
				this.OnSTOP_AGEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDDISTRICT_AGECATEGORY_DISTRICT_STREET", Storage="_DISTRICT_STREETs", ThisKey="MEDDISTRICT_AGECATEGORY_ID", OtherKey="MEDDISTRICT_AGECATEGORY_ID")]
	public EntitySet<DISTRICT_STREET> DISTRICT_STREETs
	{
		get
		{
			return this._DISTRICT_STREETs;
		}
		set
		{
			this._DISTRICT_STREETs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDDISTRICT_MEDDISTRICT_AGECATEGORY", Storage="_MEDDISTRICT", ThisKey="MEDDISTRICT_ID", OtherKey="MEDDISTRICT_ID", IsForeignKey=true)]
	public MEDDISTRICT MEDDISTRICT
	{
		get
		{
			return this._MEDDISTRICT.Entity;
		}
		set
		{
			MEDDISTRICT previousValue = this._MEDDISTRICT.Entity;
			if (((previousValue != value) 
						|| (this._MEDDISTRICT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MEDDISTRICT.Entity = null;
					previousValue.MEDDISTRICT_AGECATEGORies.Remove(this);
				}
				this._MEDDISTRICT.Entity = value;
				if ((value != null))
				{
					value.MEDDISTRICT_AGECATEGORies.Add(this);
					this._MEDDISTRICT_ID = value.MEDDISTRICT_ID;
				}
				else
				{
					this._MEDDISTRICT_ID = default(int);
				}
				this.SendPropertyChanged("MEDDISTRICT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DISTRICT_STREETs(DISTRICT_STREET entity)
	{
		this.SendPropertyChanging();
		entity.MEDDISTRICT_AGECATEGORY = this;
	}
	
	private void detach_DISTRICT_STREETs(DISTRICT_STREET entity)
	{
		this.SendPropertyChanging();
		entity.MEDDISTRICT_AGECATEGORY = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MEDORGANIZATION")]
public partial class MEDORGANIZATION : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MEDORG_ID;
	
	private string _MEDORG_NAME;
	
	private EntitySet<DEPARTAMENT> _DEPARTAMENTs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMEDORG_IDChanging(int value);
    partial void OnMEDORG_IDChanged();
    partial void OnMEDORG_NAMEChanging(string value);
    partial void OnMEDORG_NAMEChanged();
    #endregion
	
	public MEDORGANIZATION()
	{
		this._DEPARTAMENTs = new EntitySet<DEPARTAMENT>(new Action<DEPARTAMENT>(this.attach_DEPARTAMENTs), new Action<DEPARTAMENT>(this.detach_DEPARTAMENTs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDORG_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MEDORG_ID
	{
		get
		{
			return this._MEDORG_ID;
		}
		set
		{
			if ((this._MEDORG_ID != value))
			{
				this.OnMEDORG_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDORG_ID = value;
				this.SendPropertyChanged("MEDORG_ID");
				this.OnMEDORG_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDORG_NAME", DbType="VarChar(50)")]
	public string MEDORG_NAME
	{
		get
		{
			return this._MEDORG_NAME;
		}
		set
		{
			if ((this._MEDORG_NAME != value))
			{
				this.OnMEDORG_NAMEChanging(value);
				this.SendPropertyChanging();
				this._MEDORG_NAME = value;
				this.SendPropertyChanged("MEDORG_NAME");
				this.OnMEDORG_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDORGANIZATION_DEPARTAMENT", Storage="_DEPARTAMENTs", ThisKey="MEDORG_ID", OtherKey="MEDORG_ID")]
	public EntitySet<DEPARTAMENT> DEPARTAMENTs
	{
		get
		{
			return this._DEPARTAMENTs;
		}
		set
		{
			this._DEPARTAMENTs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DEPARTAMENTs(DEPARTAMENT entity)
	{
		this.SendPropertyChanging();
		entity.MEDORGANIZATION = this;
	}
	
	private void detach_DEPARTAMENTs(DEPARTAMENT entity)
	{
		this.SendPropertyChanging();
		entity.MEDORGANIZATION = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OFFICE")]
public partial class OFFICE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OFFICES_ID;
	
	private string _NUMBER;
	
	private int _DEPART_ID;
	
	private EntitySet<SCHEDULE_DOC> _SCHEDULE_DOCs;
	
	private EntityRef<DEPARTAMENT> _DEPARTAMENT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOFFICES_IDChanging(int value);
    partial void OnOFFICES_IDChanged();
    partial void OnNUMBERChanging(string value);
    partial void OnNUMBERChanged();
    partial void OnDEPART_IDChanging(int value);
    partial void OnDEPART_IDChanged();
    #endregion
	
	public OFFICE()
	{
		this._SCHEDULE_DOCs = new EntitySet<SCHEDULE_DOC>(new Action<SCHEDULE_DOC>(this.attach_SCHEDULE_DOCs), new Action<SCHEDULE_DOC>(this.detach_SCHEDULE_DOCs));
		this._DEPARTAMENT = default(EntityRef<DEPARTAMENT>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OFFICES_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OFFICES_ID
	{
		get
		{
			return this._OFFICES_ID;
		}
		set
		{
			if ((this._OFFICES_ID != value))
			{
				this.OnOFFICES_IDChanging(value);
				this.SendPropertyChanging();
				this._OFFICES_ID = value;
				this.SendPropertyChanged("OFFICES_ID");
				this.OnOFFICES_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMBER", DbType="VarChar(20)")]
	public string NUMBER
	{
		get
		{
			return this._NUMBER;
		}
		set
		{
			if ((this._NUMBER != value))
			{
				this.OnNUMBERChanging(value);
				this.SendPropertyChanging();
				this._NUMBER = value;
				this.SendPropertyChanged("NUMBER");
				this.OnNUMBERChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPART_ID", DbType="Int NOT NULL")]
	public int DEPART_ID
	{
		get
		{
			return this._DEPART_ID;
		}
		set
		{
			if ((this._DEPART_ID != value))
			{
				if (this._DEPARTAMENT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDEPART_IDChanging(value);
				this.SendPropertyChanging();
				this._DEPART_ID = value;
				this.SendPropertyChanged("DEPART_ID");
				this.OnDEPART_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OFFICE_SCHEDULE_DOC", Storage="_SCHEDULE_DOCs", ThisKey="OFFICES_ID", OtherKey="OFFICES_ID")]
	public EntitySet<SCHEDULE_DOC> SCHEDULE_DOCs
	{
		get
		{
			return this._SCHEDULE_DOCs;
		}
		set
		{
			this._SCHEDULE_DOCs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTAMENT_OFFICE", Storage="_DEPARTAMENT", ThisKey="DEPART_ID", OtherKey="DEPART_ID", IsForeignKey=true)]
	public DEPARTAMENT DEPARTAMENT
	{
		get
		{
			return this._DEPARTAMENT.Entity;
		}
		set
		{
			DEPARTAMENT previousValue = this._DEPARTAMENT.Entity;
			if (((previousValue != value) 
						|| (this._DEPARTAMENT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DEPARTAMENT.Entity = null;
					previousValue.OFFICEs.Remove(this);
				}
				this._DEPARTAMENT.Entity = value;
				if ((value != null))
				{
					value.OFFICEs.Add(this);
					this._DEPART_ID = value.DEPART_ID;
				}
				else
				{
					this._DEPART_ID = default(int);
				}
				this.SendPropertyChanged("DEPARTAMENT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SCHEDULE_DOCs(SCHEDULE_DOC entity)
	{
		this.SendPropertyChanging();
		entity.OFFICE = this;
	}
	
	private void detach_SCHEDULE_DOCs(SCHEDULE_DOC entity)
	{
		this.SendPropertyChanging();
		entity.OFFICE = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PATIENT")]
public partial class PATIENT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PATIENT_ID;
	
	private string _FIRSTNAME;
	
	private string _MIDDLENAME;
	
	private string _LASTNAME;
	
	private System.Nullable<System.DateTime> _BIRTHDATE;
	
	private string _HOMETEL;
	
	private string _MOBTEL;
	
	private System.Nullable<int> _SEX;
	
	private string _EMAIL;
	
	private int _MEDDISTRICT_ID;
	
	private int _REG_ID;
	
	private int _DISTR_ID;
	
	private int _SETTL_ID;
	
	private string _HOUSE;
	
	private string _SECTION;
	
	private string _FLAT;
	
	private EntitySet<USSER> _USSERs;
	
	private EntitySet<RECEPTION> _RECEPTIONs;
	
	private EntityRef<MEDDISTRICT> _MEDDISTRICT;
	
	private EntityRef<DISTRICT> _DISTRICT;
	
	private EntityRef<REGION> _REGION;
	
	private EntityRef<SETTLEMENT> _SETTLEMENT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPATIENT_IDChanging(int value);
    partial void OnPATIENT_IDChanged();
    partial void OnFIRSTNAMEChanging(string value);
    partial void OnFIRSTNAMEChanged();
    partial void OnMIDDLENAMEChanging(string value);
    partial void OnMIDDLENAMEChanged();
    partial void OnLASTNAMEChanging(string value);
    partial void OnLASTNAMEChanged();
    partial void OnBIRTHDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnBIRTHDATEChanged();
    partial void OnHOMETELChanging(string value);
    partial void OnHOMETELChanged();
    partial void OnMOBTELChanging(string value);
    partial void OnMOBTELChanged();
    partial void OnSEXChanging(System.Nullable<int> value);
    partial void OnSEXChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnMEDDISTRICT_IDChanging(int value);
    partial void OnMEDDISTRICT_IDChanged();
    partial void OnREG_IDChanging(int value);
    partial void OnREG_IDChanged();
    partial void OnDISTR_IDChanging(int value);
    partial void OnDISTR_IDChanged();
    partial void OnSETTL_IDChanging(int value);
    partial void OnSETTL_IDChanged();
    partial void OnHOUSEChanging(string value);
    partial void OnHOUSEChanged();
    partial void OnSECTIONChanging(string value);
    partial void OnSECTIONChanged();
    partial void OnFLATChanging(string value);
    partial void OnFLATChanged();
    #endregion
	
	public PATIENT()
	{
		this._USSERs = new EntitySet<USSER>(new Action<USSER>(this.attach_USSERs), new Action<USSER>(this.detach_USSERs));
		this._RECEPTIONs = new EntitySet<RECEPTION>(new Action<RECEPTION>(this.attach_RECEPTIONs), new Action<RECEPTION>(this.detach_RECEPTIONs));
		this._MEDDISTRICT = default(EntityRef<MEDDISTRICT>);
		this._DISTRICT = default(EntityRef<DISTRICT>);
		this._REGION = default(EntityRef<REGION>);
		this._SETTLEMENT = default(EntityRef<SETTLEMENT>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PATIENT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PATIENT_ID
	{
		get
		{
			return this._PATIENT_ID;
		}
		set
		{
			if ((this._PATIENT_ID != value))
			{
				this.OnPATIENT_IDChanging(value);
				this.SendPropertyChanging();
				this._PATIENT_ID = value;
				this.SendPropertyChanged("PATIENT_ID");
				this.OnPATIENT_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRSTNAME", DbType="VarChar(50)")]
	public string FIRSTNAME
	{
		get
		{
			return this._FIRSTNAME;
		}
		set
		{
			if ((this._FIRSTNAME != value))
			{
				this.OnFIRSTNAMEChanging(value);
				this.SendPropertyChanging();
				this._FIRSTNAME = value;
				this.SendPropertyChanged("FIRSTNAME");
				this.OnFIRSTNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MIDDLENAME", DbType="VarChar(50)")]
	public string MIDDLENAME
	{
		get
		{
			return this._MIDDLENAME;
		}
		set
		{
			if ((this._MIDDLENAME != value))
			{
				this.OnMIDDLENAMEChanging(value);
				this.SendPropertyChanging();
				this._MIDDLENAME = value;
				this.SendPropertyChanged("MIDDLENAME");
				this.OnMIDDLENAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LASTNAME", DbType="VarChar(50)")]
	public string LASTNAME
	{
		get
		{
			return this._LASTNAME;
		}
		set
		{
			if ((this._LASTNAME != value))
			{
				this.OnLASTNAMEChanging(value);
				this.SendPropertyChanging();
				this._LASTNAME = value;
				this.SendPropertyChanged("LASTNAME");
				this.OnLASTNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BIRTHDATE", DbType="DateTime")]
	public System.Nullable<System.DateTime> BIRTHDATE
	{
		get
		{
			return this._BIRTHDATE;
		}
		set
		{
			if ((this._BIRTHDATE != value))
			{
				this.OnBIRTHDATEChanging(value);
				this.SendPropertyChanging();
				this._BIRTHDATE = value;
				this.SendPropertyChanged("BIRTHDATE");
				this.OnBIRTHDATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOMETEL", DbType="VarChar(20)")]
	public string HOMETEL
	{
		get
		{
			return this._HOMETEL;
		}
		set
		{
			if ((this._HOMETEL != value))
			{
				this.OnHOMETELChanging(value);
				this.SendPropertyChanging();
				this._HOMETEL = value;
				this.SendPropertyChanged("HOMETEL");
				this.OnHOMETELChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOBTEL", DbType="VarChar(20)")]
	public string MOBTEL
	{
		get
		{
			return this._MOBTEL;
		}
		set
		{
			if ((this._MOBTEL != value))
			{
				this.OnMOBTELChanging(value);
				this.SendPropertyChanging();
				this._MOBTEL = value;
				this.SendPropertyChanged("MOBTEL");
				this.OnMOBTELChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SEX", DbType="Int")]
	public System.Nullable<int> SEX
	{
		get
		{
			return this._SEX;
		}
		set
		{
			if ((this._SEX != value))
			{
				this.OnSEXChanging(value);
				this.SendPropertyChanging();
				this._SEX = value;
				this.SendPropertyChanged("SEX");
				this.OnSEXChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="VarChar(20)")]
	public string EMAIL
	{
		get
		{
			return this._EMAIL;
		}
		set
		{
			if ((this._EMAIL != value))
			{
				this.OnEMAILChanging(value);
				this.SendPropertyChanging();
				this._EMAIL = value;
				this.SendPropertyChanged("EMAIL");
				this.OnEMAILChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDDISTRICT_ID", DbType="Int NOT NULL")]
	public int MEDDISTRICT_ID
	{
		get
		{
			return this._MEDDISTRICT_ID;
		}
		set
		{
			if ((this._MEDDISTRICT_ID != value))
			{
				if (this._MEDDISTRICT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMEDDISTRICT_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDDISTRICT_ID = value;
				this.SendPropertyChanged("MEDDISTRICT_ID");
				this.OnMEDDISTRICT_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REG_ID", DbType="Int NOT NULL")]
	public int REG_ID
	{
		get
		{
			return this._REG_ID;
		}
		set
		{
			if ((this._REG_ID != value))
			{
				if (this._REGION.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnREG_IDChanging(value);
				this.SendPropertyChanging();
				this._REG_ID = value;
				this.SendPropertyChanged("REG_ID");
				this.OnREG_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISTR_ID", DbType="Int NOT NULL")]
	public int DISTR_ID
	{
		get
		{
			return this._DISTR_ID;
		}
		set
		{
			if ((this._DISTR_ID != value))
			{
				if (this._DISTRICT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDISTR_IDChanging(value);
				this.SendPropertyChanging();
				this._DISTR_ID = value;
				this.SendPropertyChanged("DISTR_ID");
				this.OnDISTR_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SETTL_ID", DbType="Int NOT NULL")]
	public int SETTL_ID
	{
		get
		{
			return this._SETTL_ID;
		}
		set
		{
			if ((this._SETTL_ID != value))
			{
				if (this._SETTLEMENT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSETTL_IDChanging(value);
				this.SendPropertyChanging();
				this._SETTL_ID = value;
				this.SendPropertyChanged("SETTL_ID");
				this.OnSETTL_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOUSE", DbType="VarChar(20)")]
	public string HOUSE
	{
		get
		{
			return this._HOUSE;
		}
		set
		{
			if ((this._HOUSE != value))
			{
				this.OnHOUSEChanging(value);
				this.SendPropertyChanging();
				this._HOUSE = value;
				this.SendPropertyChanged("HOUSE");
				this.OnHOUSEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SECTION", DbType="VarChar(20)")]
	public string SECTION
	{
		get
		{
			return this._SECTION;
		}
		set
		{
			if ((this._SECTION != value))
			{
				this.OnSECTIONChanging(value);
				this.SendPropertyChanging();
				this._SECTION = value;
				this.SendPropertyChanged("SECTION");
				this.OnSECTIONChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FLAT", DbType="VarChar(20)")]
	public string FLAT
	{
		get
		{
			return this._FLAT;
		}
		set
		{
			if ((this._FLAT != value))
			{
				this.OnFLATChanging(value);
				this.SendPropertyChanging();
				this._FLAT = value;
				this.SendPropertyChanged("FLAT");
				this.OnFLATChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PATIENT_USSER", Storage="_USSERs", ThisKey="PATIENT_ID", OtherKey="PATIENT_ID")]
	public EntitySet<USSER> USSERs
	{
		get
		{
			return this._USSERs;
		}
		set
		{
			this._USSERs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PATIENT_RECEPTION", Storage="_RECEPTIONs", ThisKey="PATIENT_ID", OtherKey="PATIENT_ID")]
	public EntitySet<RECEPTION> RECEPTIONs
	{
		get
		{
			return this._RECEPTIONs;
		}
		set
		{
			this._RECEPTIONs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDDISTRICT_PATIENT", Storage="_MEDDISTRICT", ThisKey="MEDDISTRICT_ID", OtherKey="MEDDISTRICT_ID", IsForeignKey=true)]
	public MEDDISTRICT MEDDISTRICT
	{
		get
		{
			return this._MEDDISTRICT.Entity;
		}
		set
		{
			MEDDISTRICT previousValue = this._MEDDISTRICT.Entity;
			if (((previousValue != value) 
						|| (this._MEDDISTRICT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MEDDISTRICT.Entity = null;
					previousValue.PATIENTs.Remove(this);
				}
				this._MEDDISTRICT.Entity = value;
				if ((value != null))
				{
					value.PATIENTs.Add(this);
					this._MEDDISTRICT_ID = value.MEDDISTRICT_ID;
				}
				else
				{
					this._MEDDISTRICT_ID = default(int);
				}
				this.SendPropertyChanged("MEDDISTRICT");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_PATIENT", Storage="_DISTRICT", ThisKey="DISTR_ID", OtherKey="DISTR_ID", IsForeignKey=true)]
	public DISTRICT DISTRICT
	{
		get
		{
			return this._DISTRICT.Entity;
		}
		set
		{
			DISTRICT previousValue = this._DISTRICT.Entity;
			if (((previousValue != value) 
						|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DISTRICT.Entity = null;
					previousValue.PATIENTs.Remove(this);
				}
				this._DISTRICT.Entity = value;
				if ((value != null))
				{
					value.PATIENTs.Add(this);
					this._DISTR_ID = value.DISTR_ID;
				}
				else
				{
					this._DISTR_ID = default(int);
				}
				this.SendPropertyChanged("DISTRICT");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REGION_PATIENT", Storage="_REGION", ThisKey="REG_ID", OtherKey="REG_ID", IsForeignKey=true)]
	public REGION REGION
	{
		get
		{
			return this._REGION.Entity;
		}
		set
		{
			REGION previousValue = this._REGION.Entity;
			if (((previousValue != value) 
						|| (this._REGION.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._REGION.Entity = null;
					previousValue.PATIENTs.Remove(this);
				}
				this._REGION.Entity = value;
				if ((value != null))
				{
					value.PATIENTs.Add(this);
					this._REG_ID = value.REG_ID;
				}
				else
				{
					this._REG_ID = default(int);
				}
				this.SendPropertyChanged("REGION");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SETTLEMENT_PATIENT", Storage="_SETTLEMENT", ThisKey="SETTL_ID", OtherKey="SETTL_ID", IsForeignKey=true)]
	public SETTLEMENT SETTLEMENT
	{
		get
		{
			return this._SETTLEMENT.Entity;
		}
		set
		{
			SETTLEMENT previousValue = this._SETTLEMENT.Entity;
			if (((previousValue != value) 
						|| (this._SETTLEMENT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SETTLEMENT.Entity = null;
					previousValue.PATIENTs.Remove(this);
				}
				this._SETTLEMENT.Entity = value;
				if ((value != null))
				{
					value.PATIENTs.Add(this);
					this._SETTL_ID = value.SETTL_ID;
				}
				else
				{
					this._SETTL_ID = default(int);
				}
				this.SendPropertyChanged("SETTLEMENT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_USSERs(USSER entity)
	{
		this.SendPropertyChanging();
		entity.PATIENT = this;
	}
	
	private void detach_USSERs(USSER entity)
	{
		this.SendPropertyChanging();
		entity.PATIENT = null;
	}
	
	private void attach_RECEPTIONs(RECEPTION entity)
	{
		this.SendPropertyChanging();
		entity.PATIENT = this;
	}
	
	private void detach_RECEPTIONs(RECEPTION entity)
	{
		this.SendPropertyChanging();
		entity.PATIENT = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PERSONAL")]
public partial class PERSONAL : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PERSONAL_ID;
	
	private string _FIRSTNAME;
	
	private string _MIDLNAME;
	
	private string _LASTNAME;
	
	private EntitySet<POST> _POSTs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPERSONAL_IDChanging(int value);
    partial void OnPERSONAL_IDChanged();
    partial void OnFIRSTNAMEChanging(string value);
    partial void OnFIRSTNAMEChanged();
    partial void OnMIDLNAMEChanging(string value);
    partial void OnMIDLNAMEChanged();
    partial void OnLASTNAMEChanging(string value);
    partial void OnLASTNAMEChanged();
    #endregion
	
	public PERSONAL()
	{
		this._POSTs = new EntitySet<POST>(new Action<POST>(this.attach_POSTs), new Action<POST>(this.detach_POSTs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONAL_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PERSONAL_ID
	{
		get
		{
			return this._PERSONAL_ID;
		}
		set
		{
			if ((this._PERSONAL_ID != value))
			{
				this.OnPERSONAL_IDChanging(value);
				this.SendPropertyChanging();
				this._PERSONAL_ID = value;
				this.SendPropertyChanged("PERSONAL_ID");
				this.OnPERSONAL_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRSTNAME", DbType="VarChar(20)")]
	public string FIRSTNAME
	{
		get
		{
			return this._FIRSTNAME;
		}
		set
		{
			if ((this._FIRSTNAME != value))
			{
				this.OnFIRSTNAMEChanging(value);
				this.SendPropertyChanging();
				this._FIRSTNAME = value;
				this.SendPropertyChanged("FIRSTNAME");
				this.OnFIRSTNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MIDLNAME", DbType="VarChar(20)")]
	public string MIDLNAME
	{
		get
		{
			return this._MIDLNAME;
		}
		set
		{
			if ((this._MIDLNAME != value))
			{
				this.OnMIDLNAMEChanging(value);
				this.SendPropertyChanging();
				this._MIDLNAME = value;
				this.SendPropertyChanged("MIDLNAME");
				this.OnMIDLNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LASTNAME", DbType="VarChar(20)")]
	public string LASTNAME
	{
		get
		{
			return this._LASTNAME;
		}
		set
		{
			if ((this._LASTNAME != value))
			{
				this.OnLASTNAMEChanging(value);
				this.SendPropertyChanging();
				this._LASTNAME = value;
				this.SendPropertyChanged("LASTNAME");
				this.OnLASTNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERSONAL_POST", Storage="_POSTs", ThisKey="PERSONAL_ID", OtherKey="PERSONAL_ID")]
	public EntitySet<POST> POSTs
	{
		get
		{
			return this._POSTs;
		}
		set
		{
			this._POSTs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_POSTs(POST entity)
	{
		this.SendPropertyChanging();
		entity.PERSONAL = this;
	}
	
	private void detach_POSTs(POST entity)
	{
		this.SendPropertyChanging();
		entity.PERSONAL = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POST")]
public partial class POST : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MEDPROF_ID;
	
	private int _POST_ID;
	
	private int _DEPART_ID;
	
	private int _PERSONAL_ID;
	
	private EntitySet<MEDDISTRICT> _MEDDISTRICTs;
	
	private EntitySet<RECEPTION> _RECEPTIONs;
	
	private EntitySet<SCHEDULE_DOC> _SCHEDULE_DOCs;
	
	private EntitySet<TEMPLATEGRAFTIME> _TEMPLATEGRAFTIMEs;
	
	private EntityRef<MED_PROFESSION> _MED_PROFESSION;
	
	private EntityRef<DEPARTAMENT> _DEPARTAMENT;
	
	private EntityRef<PERSONAL> _PERSONAL;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMEDPROF_IDChanging(int value);
    partial void OnMEDPROF_IDChanged();
    partial void OnPOST_IDChanging(int value);
    partial void OnPOST_IDChanged();
    partial void OnDEPART_IDChanging(int value);
    partial void OnDEPART_IDChanged();
    partial void OnPERSONAL_IDChanging(int value);
    partial void OnPERSONAL_IDChanged();
    #endregion
	
	public POST()
	{
		this._MEDDISTRICTs = new EntitySet<MEDDISTRICT>(new Action<MEDDISTRICT>(this.attach_MEDDISTRICTs), new Action<MEDDISTRICT>(this.detach_MEDDISTRICTs));
		this._RECEPTIONs = new EntitySet<RECEPTION>(new Action<RECEPTION>(this.attach_RECEPTIONs), new Action<RECEPTION>(this.detach_RECEPTIONs));
		this._SCHEDULE_DOCs = new EntitySet<SCHEDULE_DOC>(new Action<SCHEDULE_DOC>(this.attach_SCHEDULE_DOCs), new Action<SCHEDULE_DOC>(this.detach_SCHEDULE_DOCs));
		this._TEMPLATEGRAFTIMEs = new EntitySet<TEMPLATEGRAFTIME>(new Action<TEMPLATEGRAFTIME>(this.attach_TEMPLATEGRAFTIMEs), new Action<TEMPLATEGRAFTIME>(this.detach_TEMPLATEGRAFTIMEs));
		this._MED_PROFESSION = default(EntityRef<MED_PROFESSION>);
		this._DEPARTAMENT = default(EntityRef<DEPARTAMENT>);
		this._PERSONAL = default(EntityRef<PERSONAL>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MEDPROF_ID", DbType="Int NOT NULL")]
	public int MEDPROF_ID
	{
		get
		{
			return this._MEDPROF_ID;
		}
		set
		{
			if ((this._MEDPROF_ID != value))
			{
				if (this._MED_PROFESSION.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMEDPROF_IDChanging(value);
				this.SendPropertyChanging();
				this._MEDPROF_ID = value;
				this.SendPropertyChanged("MEDPROF_ID");
				this.OnMEDPROF_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POST_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int POST_ID
	{
		get
		{
			return this._POST_ID;
		}
		set
		{
			if ((this._POST_ID != value))
			{
				this.OnPOST_IDChanging(value);
				this.SendPropertyChanging();
				this._POST_ID = value;
				this.SendPropertyChanged("POST_ID");
				this.OnPOST_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPART_ID", DbType="Int NOT NULL")]
	public int DEPART_ID
	{
		get
		{
			return this._DEPART_ID;
		}
		set
		{
			if ((this._DEPART_ID != value))
			{
				if (this._DEPARTAMENT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDEPART_IDChanging(value);
				this.SendPropertyChanging();
				this._DEPART_ID = value;
				this.SendPropertyChanged("DEPART_ID");
				this.OnDEPART_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONAL_ID", DbType="Int NOT NULL")]
	public int PERSONAL_ID
	{
		get
		{
			return this._PERSONAL_ID;
		}
		set
		{
			if ((this._PERSONAL_ID != value))
			{
				if (this._PERSONAL.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPERSONAL_IDChanging(value);
				this.SendPropertyChanging();
				this._PERSONAL_ID = value;
				this.SendPropertyChanged("PERSONAL_ID");
				this.OnPERSONAL_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POST_MEDDISTRICT", Storage="_MEDDISTRICTs", ThisKey="POST_ID", OtherKey="POST_ID")]
	public EntitySet<MEDDISTRICT> MEDDISTRICTs
	{
		get
		{
			return this._MEDDISTRICTs;
		}
		set
		{
			this._MEDDISTRICTs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POST_RECEPTION", Storage="_RECEPTIONs", ThisKey="POST_ID", OtherKey="POST_ID")]
	public EntitySet<RECEPTION> RECEPTIONs
	{
		get
		{
			return this._RECEPTIONs;
		}
		set
		{
			this._RECEPTIONs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POST_SCHEDULE_DOC", Storage="_SCHEDULE_DOCs", ThisKey="POST_ID", OtherKey="POST_ID")]
	public EntitySet<SCHEDULE_DOC> SCHEDULE_DOCs
	{
		get
		{
			return this._SCHEDULE_DOCs;
		}
		set
		{
			this._SCHEDULE_DOCs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POST_TEMPLATEGRAFTIME", Storage="_TEMPLATEGRAFTIMEs", ThisKey="POST_ID", OtherKey="POST_ID")]
	public EntitySet<TEMPLATEGRAFTIME> TEMPLATEGRAFTIMEs
	{
		get
		{
			return this._TEMPLATEGRAFTIMEs;
		}
		set
		{
			this._TEMPLATEGRAFTIMEs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MED_PROFESSION_POST", Storage="_MED_PROFESSION", ThisKey="MEDPROF_ID", OtherKey="MEDPROF_ID", IsForeignKey=true)]
	public MED_PROFESSION MED_PROFESSION
	{
		get
		{
			return this._MED_PROFESSION.Entity;
		}
		set
		{
			MED_PROFESSION previousValue = this._MED_PROFESSION.Entity;
			if (((previousValue != value) 
						|| (this._MED_PROFESSION.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MED_PROFESSION.Entity = null;
					previousValue.POSTs.Remove(this);
				}
				this._MED_PROFESSION.Entity = value;
				if ((value != null))
				{
					value.POSTs.Add(this);
					this._MEDPROF_ID = value.MEDPROF_ID;
				}
				else
				{
					this._MEDPROF_ID = default(int);
				}
				this.SendPropertyChanged("MED_PROFESSION");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTAMENT_POST", Storage="_DEPARTAMENT", ThisKey="DEPART_ID", OtherKey="DEPART_ID", IsForeignKey=true)]
	public DEPARTAMENT DEPARTAMENT
	{
		get
		{
			return this._DEPARTAMENT.Entity;
		}
		set
		{
			DEPARTAMENT previousValue = this._DEPARTAMENT.Entity;
			if (((previousValue != value) 
						|| (this._DEPARTAMENT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DEPARTAMENT.Entity = null;
					previousValue.POSTs.Remove(this);
				}
				this._DEPARTAMENT.Entity = value;
				if ((value != null))
				{
					value.POSTs.Add(this);
					this._DEPART_ID = value.DEPART_ID;
				}
				else
				{
					this._DEPART_ID = default(int);
				}
				this.SendPropertyChanged("DEPARTAMENT");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERSONAL_POST", Storage="_PERSONAL", ThisKey="PERSONAL_ID", OtherKey="PERSONAL_ID", IsForeignKey=true)]
	public PERSONAL PERSONAL
	{
		get
		{
			return this._PERSONAL.Entity;
		}
		set
		{
			PERSONAL previousValue = this._PERSONAL.Entity;
			if (((previousValue != value) 
						|| (this._PERSONAL.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PERSONAL.Entity = null;
					previousValue.POSTs.Remove(this);
				}
				this._PERSONAL.Entity = value;
				if ((value != null))
				{
					value.POSTs.Add(this);
					this._PERSONAL_ID = value.PERSONAL_ID;
				}
				else
				{
					this._PERSONAL_ID = default(int);
				}
				this.SendPropertyChanged("PERSONAL");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MEDDISTRICTs(MEDDISTRICT entity)
	{
		this.SendPropertyChanging();
		entity.POST = this;
	}
	
	private void detach_MEDDISTRICTs(MEDDISTRICT entity)
	{
		this.SendPropertyChanging();
		entity.POST = null;
	}
	
	private void attach_RECEPTIONs(RECEPTION entity)
	{
		this.SendPropertyChanging();
		entity.POST = this;
	}
	
	private void detach_RECEPTIONs(RECEPTION entity)
	{
		this.SendPropertyChanging();
		entity.POST = null;
	}
	
	private void attach_SCHEDULE_DOCs(SCHEDULE_DOC entity)
	{
		this.SendPropertyChanging();
		entity.POST = this;
	}
	
	private void detach_SCHEDULE_DOCs(SCHEDULE_DOC entity)
	{
		this.SendPropertyChanging();
		entity.POST = null;
	}
	
	private void attach_TEMPLATEGRAFTIMEs(TEMPLATEGRAFTIME entity)
	{
		this.SendPropertyChanging();
		entity.POST = this;
	}
	
	private void detach_TEMPLATEGRAFTIMEs(TEMPLATEGRAFTIME entity)
	{
		this.SendPropertyChanging();
		entity.POST = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RECEPTION")]
public partial class RECEPTION : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _PATIENT_ID;
	
	private System.Nullable<System.DateTime> _RTIMESTART;
	
	private System.Nullable<System.DateTime> _RDATE;
	
	private int _POST_ID;
	
	private System.Nullable<System.DateTime> _RTIMESTOP;
	
	private EntityRef<PATIENT> _PATIENT;
	
	private EntityRef<POST> _POST;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPATIENT_IDChanging(int value);
    partial void OnPATIENT_IDChanged();
    partial void OnRTIMESTARTChanging(System.Nullable<System.DateTime> value);
    partial void OnRTIMESTARTChanged();
    partial void OnRDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnRDATEChanged();
    partial void OnPOST_IDChanging(int value);
    partial void OnPOST_IDChanged();
    partial void OnRTIMESTOPChanging(System.Nullable<System.DateTime> value);
    partial void OnRTIMESTOPChanged();
    #endregion
	
	public RECEPTION()
	{
		this._PATIENT = default(EntityRef<PATIENT>);
		this._POST = default(EntityRef<POST>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PATIENT_ID", DbType="Int NOT NULL")]
	public int PATIENT_ID
	{
		get
		{
			return this._PATIENT_ID;
		}
		set
		{
			if ((this._PATIENT_ID != value))
			{
				if (this._PATIENT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPATIENT_IDChanging(value);
				this.SendPropertyChanging();
				this._PATIENT_ID = value;
				this.SendPropertyChanged("PATIENT_ID");
				this.OnPATIENT_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RTIMESTART", DbType="DateTime")]
	public System.Nullable<System.DateTime> RTIMESTART
	{
		get
		{
			return this._RTIMESTART;
		}
		set
		{
			if ((this._RTIMESTART != value))
			{
				this.OnRTIMESTARTChanging(value);
				this.SendPropertyChanging();
				this._RTIMESTART = value;
				this.SendPropertyChanged("RTIMESTART");
				this.OnRTIMESTARTChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RDATE", DbType="DateTime")]
	public System.Nullable<System.DateTime> RDATE
	{
		get
		{
			return this._RDATE;
		}
		set
		{
			if ((this._RDATE != value))
			{
				this.OnRDATEChanging(value);
				this.SendPropertyChanging();
				this._RDATE = value;
				this.SendPropertyChanged("RDATE");
				this.OnRDATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POST_ID", DbType="Int NOT NULL")]
	public int POST_ID
	{
		get
		{
			return this._POST_ID;
		}
		set
		{
			if ((this._POST_ID != value))
			{
				if (this._POST.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPOST_IDChanging(value);
				this.SendPropertyChanging();
				this._POST_ID = value;
				this.SendPropertyChanged("POST_ID");
				this.OnPOST_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RTIMESTOP", DbType="DateTime")]
	public System.Nullable<System.DateTime> RTIMESTOP
	{
		get
		{
			return this._RTIMESTOP;
		}
		set
		{
			if ((this._RTIMESTOP != value))
			{
				this.OnRTIMESTOPChanging(value);
				this.SendPropertyChanging();
				this._RTIMESTOP = value;
				this.SendPropertyChanged("RTIMESTOP");
				this.OnRTIMESTOPChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PATIENT_RECEPTION", Storage="_PATIENT", ThisKey="PATIENT_ID", OtherKey="PATIENT_ID", IsForeignKey=true)]
	public PATIENT PATIENT
	{
		get
		{
			return this._PATIENT.Entity;
		}
		set
		{
			PATIENT previousValue = this._PATIENT.Entity;
			if (((previousValue != value) 
						|| (this._PATIENT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PATIENT.Entity = null;
					previousValue.RECEPTIONs.Remove(this);
				}
				this._PATIENT.Entity = value;
				if ((value != null))
				{
					value.RECEPTIONs.Add(this);
					this._PATIENT_ID = value.PATIENT_ID;
				}
				else
				{
					this._PATIENT_ID = default(int);
				}
				this.SendPropertyChanged("PATIENT");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POST_RECEPTION", Storage="_POST", ThisKey="POST_ID", OtherKey="POST_ID", IsForeignKey=true)]
	public POST POST
	{
		get
		{
			return this._POST.Entity;
		}
		set
		{
			POST previousValue = this._POST.Entity;
			if (((previousValue != value) 
						|| (this._POST.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._POST.Entity = null;
					previousValue.RECEPTIONs.Remove(this);
				}
				this._POST.Entity = value;
				if ((value != null))
				{
					value.RECEPTIONs.Add(this);
					this._POST_ID = value.POST_ID;
				}
				else
				{
					this._POST_ID = default(int);
				}
				this.SendPropertyChanged("POST");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REGION")]
public partial class REGION : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _REG_ID;
	
	private string _REG_NAME;
	
	private EntitySet<DISTRICT> _DISTRICTs;
	
	private EntitySet<PATIENT> _PATIENTs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnREG_IDChanging(int value);
    partial void OnREG_IDChanged();
    partial void OnREG_NAMEChanging(string value);
    partial void OnREG_NAMEChanged();
    #endregion
	
	public REGION()
	{
		this._DISTRICTs = new EntitySet<DISTRICT>(new Action<DISTRICT>(this.attach_DISTRICTs), new Action<DISTRICT>(this.detach_DISTRICTs));
		this._PATIENTs = new EntitySet<PATIENT>(new Action<PATIENT>(this.attach_PATIENTs), new Action<PATIENT>(this.detach_PATIENTs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REG_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int REG_ID
	{
		get
		{
			return this._REG_ID;
		}
		set
		{
			if ((this._REG_ID != value))
			{
				this.OnREG_IDChanging(value);
				this.SendPropertyChanging();
				this._REG_ID = value;
				this.SendPropertyChanged("REG_ID");
				this.OnREG_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REG_NAME", DbType="VarChar(50)")]
	public string REG_NAME
	{
		get
		{
			return this._REG_NAME;
		}
		set
		{
			if ((this._REG_NAME != value))
			{
				this.OnREG_NAMEChanging(value);
				this.SendPropertyChanging();
				this._REG_NAME = value;
				this.SendPropertyChanged("REG_NAME");
				this.OnREG_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REGION_DISTRICT", Storage="_DISTRICTs", ThisKey="REG_ID", OtherKey="REG_ID")]
	public EntitySet<DISTRICT> DISTRICTs
	{
		get
		{
			return this._DISTRICTs;
		}
		set
		{
			this._DISTRICTs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REGION_PATIENT", Storage="_PATIENTs", ThisKey="REG_ID", OtherKey="REG_ID")]
	public EntitySet<PATIENT> PATIENTs
	{
		get
		{
			return this._PATIENTs;
		}
		set
		{
			this._PATIENTs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DISTRICTs(DISTRICT entity)
	{
		this.SendPropertyChanging();
		entity.REGION = this;
	}
	
	private void detach_DISTRICTs(DISTRICT entity)
	{
		this.SendPropertyChanging();
		entity.REGION = null;
	}
	
	private void attach_PATIENTs(PATIENT entity)
	{
		this.SendPropertyChanging();
		entity.REGION = this;
	}
	
	private void detach_PATIENTs(PATIENT entity)
	{
		this.SendPropertyChanging();
		entity.REGION = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROLE")]
public partial class ROLE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ROLE_ID;
	
	private string _ROLE_NAME;
	
	private EntitySet<USSER> _USSERs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnROLE_IDChanging(int value);
    partial void OnROLE_IDChanged();
    partial void OnROLE_NAMEChanging(string value);
    partial void OnROLE_NAMEChanged();
    #endregion
	
	public ROLE()
	{
		this._USSERs = new EntitySet<USSER>(new Action<USSER>(this.attach_USSERs), new Action<USSER>(this.detach_USSERs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROLE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ROLE_ID
	{
		get
		{
			return this._ROLE_ID;
		}
		set
		{
			if ((this._ROLE_ID != value))
			{
				this.OnROLE_IDChanging(value);
				this.SendPropertyChanging();
				this._ROLE_ID = value;
				this.SendPropertyChanged("ROLE_ID");
				this.OnROLE_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROLE_NAME", DbType="VarChar(20)")]
	public string ROLE_NAME
	{
		get
		{
			return this._ROLE_NAME;
		}
		set
		{
			if ((this._ROLE_NAME != value))
			{
				this.OnROLE_NAMEChanging(value);
				this.SendPropertyChanging();
				this._ROLE_NAME = value;
				this.SendPropertyChanged("ROLE_NAME");
				this.OnROLE_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLE_USSER", Storage="_USSERs", ThisKey="ROLE_ID", OtherKey="ROLE_ID")]
	public EntitySet<USSER> USSERs
	{
		get
		{
			return this._USSERs;
		}
		set
		{
			this._USSERs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_USSERs(USSER entity)
	{
		this.SendPropertyChanging();
		entity.ROLE = this;
	}
	
	private void detach_USSERs(USSER entity)
	{
		this.SendPropertyChanging();
		entity.ROLE = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SCHEDULE_DOC")]
public partial class SCHEDULE_DOC : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Nullable<System.DateTime> _STARTTIME;
	
	private System.Nullable<System.DateTime> _ENDTIME;
	
	private int _SCHEDULEDOC_ID;
	
	private System.Nullable<int> _MODE;
	
	private int _POST_ID;
	
	private int _OFFICES_ID;
	
	private EntityRef<POST> _POST;
	
	private EntityRef<OFFICE> _OFFICE;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTARTTIMEChanging(System.Nullable<System.DateTime> value);
    partial void OnSTARTTIMEChanged();
    partial void OnENDTIMEChanging(System.Nullable<System.DateTime> value);
    partial void OnENDTIMEChanged();
    partial void OnSCHEDULEDOC_IDChanging(int value);
    partial void OnSCHEDULEDOC_IDChanged();
    partial void OnMODEChanging(System.Nullable<int> value);
    partial void OnMODEChanged();
    partial void OnPOST_IDChanging(int value);
    partial void OnPOST_IDChanged();
    partial void OnOFFICES_IDChanging(int value);
    partial void OnOFFICES_IDChanged();
    #endregion
	
	public SCHEDULE_DOC()
	{
		this._POST = default(EntityRef<POST>);
		this._OFFICE = default(EntityRef<OFFICE>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STARTTIME", DbType="DateTime")]
	public System.Nullable<System.DateTime> STARTTIME
	{
		get
		{
			return this._STARTTIME;
		}
		set
		{
			if ((this._STARTTIME != value))
			{
				this.OnSTARTTIMEChanging(value);
				this.SendPropertyChanging();
				this._STARTTIME = value;
				this.SendPropertyChanged("STARTTIME");
				this.OnSTARTTIMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENDTIME", DbType="DateTime")]
	public System.Nullable<System.DateTime> ENDTIME
	{
		get
		{
			return this._ENDTIME;
		}
		set
		{
			if ((this._ENDTIME != value))
			{
				this.OnENDTIMEChanging(value);
				this.SendPropertyChanging();
				this._ENDTIME = value;
				this.SendPropertyChanged("ENDTIME");
				this.OnENDTIMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCHEDULEDOC_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SCHEDULEDOC_ID
	{
		get
		{
			return this._SCHEDULEDOC_ID;
		}
		set
		{
			if ((this._SCHEDULEDOC_ID != value))
			{
				this.OnSCHEDULEDOC_IDChanging(value);
				this.SendPropertyChanging();
				this._SCHEDULEDOC_ID = value;
				this.SendPropertyChanged("SCHEDULEDOC_ID");
				this.OnSCHEDULEDOC_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MODE", DbType="Int")]
	public System.Nullable<int> MODE
	{
		get
		{
			return this._MODE;
		}
		set
		{
			if ((this._MODE != value))
			{
				this.OnMODEChanging(value);
				this.SendPropertyChanging();
				this._MODE = value;
				this.SendPropertyChanged("MODE");
				this.OnMODEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POST_ID", DbType="Int NOT NULL")]
	public int POST_ID
	{
		get
		{
			return this._POST_ID;
		}
		set
		{
			if ((this._POST_ID != value))
			{
				if (this._POST.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPOST_IDChanging(value);
				this.SendPropertyChanging();
				this._POST_ID = value;
				this.SendPropertyChanged("POST_ID");
				this.OnPOST_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OFFICES_ID", DbType="Int NOT NULL")]
	public int OFFICES_ID
	{
		get
		{
			return this._OFFICES_ID;
		}
		set
		{
			if ((this._OFFICES_ID != value))
			{
				if (this._OFFICE.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOFFICES_IDChanging(value);
				this.SendPropertyChanging();
				this._OFFICES_ID = value;
				this.SendPropertyChanged("OFFICES_ID");
				this.OnOFFICES_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POST_SCHEDULE_DOC", Storage="_POST", ThisKey="POST_ID", OtherKey="POST_ID", IsForeignKey=true)]
	public POST POST
	{
		get
		{
			return this._POST.Entity;
		}
		set
		{
			POST previousValue = this._POST.Entity;
			if (((previousValue != value) 
						|| (this._POST.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._POST.Entity = null;
					previousValue.SCHEDULE_DOCs.Remove(this);
				}
				this._POST.Entity = value;
				if ((value != null))
				{
					value.SCHEDULE_DOCs.Add(this);
					this._POST_ID = value.POST_ID;
				}
				else
				{
					this._POST_ID = default(int);
				}
				this.SendPropertyChanged("POST");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OFFICE_SCHEDULE_DOC", Storage="_OFFICE", ThisKey="OFFICES_ID", OtherKey="OFFICES_ID", IsForeignKey=true)]
	public OFFICE OFFICE
	{
		get
		{
			return this._OFFICE.Entity;
		}
		set
		{
			OFFICE previousValue = this._OFFICE.Entity;
			if (((previousValue != value) 
						|| (this._OFFICE.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._OFFICE.Entity = null;
					previousValue.SCHEDULE_DOCs.Remove(this);
				}
				this._OFFICE.Entity = value;
				if ((value != null))
				{
					value.SCHEDULE_DOCs.Add(this);
					this._OFFICES_ID = value.OFFICES_ID;
				}
				else
				{
					this._OFFICES_ID = default(int);
				}
				this.SendPropertyChanged("OFFICE");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SETTLEMENTS")]
public partial class SETTLEMENT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SETTL_ID;
	
	private string _SETTL_NAME;
	
	private int _DISTR_ID;
	
	private EntitySet<PATIENT> _PATIENTs;
	
	private EntitySet<STREET> _STREETs;
	
	private EntityRef<DISTRICT> _DISTRICT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSETTL_IDChanging(int value);
    partial void OnSETTL_IDChanged();
    partial void OnSETTL_NAMEChanging(string value);
    partial void OnSETTL_NAMEChanged();
    partial void OnDISTR_IDChanging(int value);
    partial void OnDISTR_IDChanged();
    #endregion
	
	public SETTLEMENT()
	{
		this._PATIENTs = new EntitySet<PATIENT>(new Action<PATIENT>(this.attach_PATIENTs), new Action<PATIENT>(this.detach_PATIENTs));
		this._STREETs = new EntitySet<STREET>(new Action<STREET>(this.attach_STREETs), new Action<STREET>(this.detach_STREETs));
		this._DISTRICT = default(EntityRef<DISTRICT>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SETTL_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SETTL_ID
	{
		get
		{
			return this._SETTL_ID;
		}
		set
		{
			if ((this._SETTL_ID != value))
			{
				this.OnSETTL_IDChanging(value);
				this.SendPropertyChanging();
				this._SETTL_ID = value;
				this.SendPropertyChanged("SETTL_ID");
				this.OnSETTL_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SETTL_NAME", DbType="VarChar(50)")]
	public string SETTL_NAME
	{
		get
		{
			return this._SETTL_NAME;
		}
		set
		{
			if ((this._SETTL_NAME != value))
			{
				this.OnSETTL_NAMEChanging(value);
				this.SendPropertyChanging();
				this._SETTL_NAME = value;
				this.SendPropertyChanged("SETTL_NAME");
				this.OnSETTL_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISTR_ID", DbType="Int NOT NULL")]
	public int DISTR_ID
	{
		get
		{
			return this._DISTR_ID;
		}
		set
		{
			if ((this._DISTR_ID != value))
			{
				if (this._DISTRICT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDISTR_IDChanging(value);
				this.SendPropertyChanging();
				this._DISTR_ID = value;
				this.SendPropertyChanged("DISTR_ID");
				this.OnDISTR_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SETTLEMENT_PATIENT", Storage="_PATIENTs", ThisKey="SETTL_ID", OtherKey="SETTL_ID")]
	public EntitySet<PATIENT> PATIENTs
	{
		get
		{
			return this._PATIENTs;
		}
		set
		{
			this._PATIENTs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SETTLEMENT_STREET", Storage="_STREETs", ThisKey="SETTL_ID", OtherKey="SETTL_ID")]
	public EntitySet<STREET> STREETs
	{
		get
		{
			return this._STREETs;
		}
		set
		{
			this._STREETs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_SETTLEMENT", Storage="_DISTRICT", ThisKey="DISTR_ID", OtherKey="DISTR_ID", IsForeignKey=true)]
	public DISTRICT DISTRICT
	{
		get
		{
			return this._DISTRICT.Entity;
		}
		set
		{
			DISTRICT previousValue = this._DISTRICT.Entity;
			if (((previousValue != value) 
						|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DISTRICT.Entity = null;
					previousValue.SETTLEMENTs.Remove(this);
				}
				this._DISTRICT.Entity = value;
				if ((value != null))
				{
					value.SETTLEMENTs.Add(this);
					this._DISTR_ID = value.DISTR_ID;
				}
				else
				{
					this._DISTR_ID = default(int);
				}
				this.SendPropertyChanged("DISTRICT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PATIENTs(PATIENT entity)
	{
		this.SendPropertyChanging();
		entity.SETTLEMENT = this;
	}
	
	private void detach_PATIENTs(PATIENT entity)
	{
		this.SendPropertyChanging();
		entity.SETTLEMENT = null;
	}
	
	private void attach_STREETs(STREET entity)
	{
		this.SendPropertyChanging();
		entity.SETTLEMENT = this;
	}
	
	private void detach_STREETs(STREET entity)
	{
		this.SendPropertyChanging();
		entity.SETTLEMENT = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STREET")]
public partial class STREET : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _STREET_ID;
	
	private string _STREET_NAME;
	
	private int _SETTL_ID;
	
	private EntitySet<DISTRICT_STREET> _DISTRICT_STREETs;
	
	private EntityRef<SETTLEMENT> _SETTLEMENT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTREET_IDChanging(int value);
    partial void OnSTREET_IDChanged();
    partial void OnSTREET_NAMEChanging(string value);
    partial void OnSTREET_NAMEChanged();
    partial void OnSETTL_IDChanging(int value);
    partial void OnSETTL_IDChanged();
    #endregion
	
	public STREET()
	{
		this._DISTRICT_STREETs = new EntitySet<DISTRICT_STREET>(new Action<DISTRICT_STREET>(this.attach_DISTRICT_STREETs), new Action<DISTRICT_STREET>(this.detach_DISTRICT_STREETs));
		this._SETTLEMENT = default(EntityRef<SETTLEMENT>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREET_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int STREET_ID
	{
		get
		{
			return this._STREET_ID;
		}
		set
		{
			if ((this._STREET_ID != value))
			{
				this.OnSTREET_IDChanging(value);
				this.SendPropertyChanging();
				this._STREET_ID = value;
				this.SendPropertyChanged("STREET_ID");
				this.OnSTREET_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREET_NAME", DbType="VarChar(50)")]
	public string STREET_NAME
	{
		get
		{
			return this._STREET_NAME;
		}
		set
		{
			if ((this._STREET_NAME != value))
			{
				this.OnSTREET_NAMEChanging(value);
				this.SendPropertyChanging();
				this._STREET_NAME = value;
				this.SendPropertyChanged("STREET_NAME");
				this.OnSTREET_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SETTL_ID", DbType="Int NOT NULL")]
	public int SETTL_ID
	{
		get
		{
			return this._SETTL_ID;
		}
		set
		{
			if ((this._SETTL_ID != value))
			{
				if (this._SETTLEMENT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSETTL_IDChanging(value);
				this.SendPropertyChanging();
				this._SETTL_ID = value;
				this.SendPropertyChanged("SETTL_ID");
				this.OnSETTL_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_DISTRICT_STREET", Storage="_DISTRICT_STREETs", ThisKey="STREET_ID", OtherKey="STREET_ID")]
	public EntitySet<DISTRICT_STREET> DISTRICT_STREETs
	{
		get
		{
			return this._DISTRICT_STREETs;
		}
		set
		{
			this._DISTRICT_STREETs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SETTLEMENT_STREET", Storage="_SETTLEMENT", ThisKey="SETTL_ID", OtherKey="SETTL_ID", IsForeignKey=true)]
	public SETTLEMENT SETTLEMENT
	{
		get
		{
			return this._SETTLEMENT.Entity;
		}
		set
		{
			SETTLEMENT previousValue = this._SETTLEMENT.Entity;
			if (((previousValue != value) 
						|| (this._SETTLEMENT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SETTLEMENT.Entity = null;
					previousValue.STREETs.Remove(this);
				}
				this._SETTLEMENT.Entity = value;
				if ((value != null))
				{
					value.STREETs.Add(this);
					this._SETTL_ID = value.SETTL_ID;
				}
				else
				{
					this._SETTL_ID = default(int);
				}
				this.SendPropertyChanged("SETTLEMENT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DISTRICT_STREETs(DISTRICT_STREET entity)
	{
		this.SendPropertyChanging();
		entity.STREET = this;
	}
	
	private void detach_DISTRICT_STREETs(DISTRICT_STREET entity)
	{
		this.SendPropertyChanging();
		entity.STREET = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TEMPLATEGRAFTIME")]
public partial class TEMPLATEGRAFTIME : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TEMPLATEGRAFTIME_ID;
	
	private System.Nullable<System.DateTime> _MONDAY_FROM;
	
	private System.Nullable<System.DateTime> _MONDAY_UNTIL;
	
	private System.Nullable<System.DateTime> _TUESDAY_FROM;
	
	private System.Nullable<System.DateTime> _TUESDAY_UNTIL;
	
	private System.Nullable<System.DateTime> _WEDNESDAY_FROM;
	
	private System.Nullable<System.DateTime> _WEDNESDAY_UNTIL;
	
	private System.Nullable<System.DateTime> _THURSDAY_FROM;
	
	private System.Nullable<System.DateTime> _THURSDAY_UNTIL;
	
	private System.Nullable<System.DateTime> _FRIDAY_FROM;
	
	private System.Nullable<System.DateTime> _FRIDAY_UNTIL;
	
	private System.Nullable<System.DateTime> _SATURDAY_FROM;
	
	private System.Nullable<System.DateTime> _SATURDAY_UNTIL;
	
	private System.Nullable<System.DateTime> _SUNDAY_FROM;
	
	private System.Nullable<System.DateTime> _SUNDAY_UNTIL;
	
	private int _POST_ID;
	
	private string _MODE;
	
	private EntityRef<POST> _POST;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEMPLATEGRAFTIME_IDChanging(int value);
    partial void OnTEMPLATEGRAFTIME_IDChanged();
    partial void OnMONDAY_FROMChanging(System.Nullable<System.DateTime> value);
    partial void OnMONDAY_FROMChanged();
    partial void OnMONDAY_UNTILChanging(System.Nullable<System.DateTime> value);
    partial void OnMONDAY_UNTILChanged();
    partial void OnTUESDAY_FROMChanging(System.Nullable<System.DateTime> value);
    partial void OnTUESDAY_FROMChanged();
    partial void OnTUESDAY_UNTILChanging(System.Nullable<System.DateTime> value);
    partial void OnTUESDAY_UNTILChanged();
    partial void OnWEDNESDAY_FROMChanging(System.Nullable<System.DateTime> value);
    partial void OnWEDNESDAY_FROMChanged();
    partial void OnWEDNESDAY_UNTILChanging(System.Nullable<System.DateTime> value);
    partial void OnWEDNESDAY_UNTILChanged();
    partial void OnTHURSDAY_FROMChanging(System.Nullable<System.DateTime> value);
    partial void OnTHURSDAY_FROMChanged();
    partial void OnTHURSDAY_UNTILChanging(System.Nullable<System.DateTime> value);
    partial void OnTHURSDAY_UNTILChanged();
    partial void OnFRIDAY_FROMChanging(System.Nullable<System.DateTime> value);
    partial void OnFRIDAY_FROMChanged();
    partial void OnFRIDAY_UNTILChanging(System.Nullable<System.DateTime> value);
    partial void OnFRIDAY_UNTILChanged();
    partial void OnSATURDAY_FROMChanging(System.Nullable<System.DateTime> value);
    partial void OnSATURDAY_FROMChanged();
    partial void OnSATURDAY_UNTILChanging(System.Nullable<System.DateTime> value);
    partial void OnSATURDAY_UNTILChanged();
    partial void OnSUNDAY_FROMChanging(System.Nullable<System.DateTime> value);
    partial void OnSUNDAY_FROMChanged();
    partial void OnSUNDAY_UNTILChanging(System.Nullable<System.DateTime> value);
    partial void OnSUNDAY_UNTILChanged();
    partial void OnPOST_IDChanging(int value);
    partial void OnPOST_IDChanged();
    partial void OnMODEChanging(string value);
    partial void OnMODEChanged();
    #endregion
	
	public TEMPLATEGRAFTIME()
	{
		this._POST = default(EntityRef<POST>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEMPLATEGRAFTIME_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TEMPLATEGRAFTIME_ID
	{
		get
		{
			return this._TEMPLATEGRAFTIME_ID;
		}
		set
		{
			if ((this._TEMPLATEGRAFTIME_ID != value))
			{
				this.OnTEMPLATEGRAFTIME_IDChanging(value);
				this.SendPropertyChanging();
				this._TEMPLATEGRAFTIME_ID = value;
				this.SendPropertyChanged("TEMPLATEGRAFTIME_ID");
				this.OnTEMPLATEGRAFTIME_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MONDAY_FROM", DbType="DateTime")]
	public System.Nullable<System.DateTime> MONDAY_FROM
	{
		get
		{
			return this._MONDAY_FROM;
		}
		set
		{
			if ((this._MONDAY_FROM != value))
			{
				this.OnMONDAY_FROMChanging(value);
				this.SendPropertyChanging();
				this._MONDAY_FROM = value;
				this.SendPropertyChanged("MONDAY_FROM");
				this.OnMONDAY_FROMChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MONDAY_UNTIL", DbType="DateTime")]
	public System.Nullable<System.DateTime> MONDAY_UNTIL
	{
		get
		{
			return this._MONDAY_UNTIL;
		}
		set
		{
			if ((this._MONDAY_UNTIL != value))
			{
				this.OnMONDAY_UNTILChanging(value);
				this.SendPropertyChanging();
				this._MONDAY_UNTIL = value;
				this.SendPropertyChanged("MONDAY_UNTIL");
				this.OnMONDAY_UNTILChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TUESDAY_FROM", DbType="DateTime")]
	public System.Nullable<System.DateTime> TUESDAY_FROM
	{
		get
		{
			return this._TUESDAY_FROM;
		}
		set
		{
			if ((this._TUESDAY_FROM != value))
			{
				this.OnTUESDAY_FROMChanging(value);
				this.SendPropertyChanging();
				this._TUESDAY_FROM = value;
				this.SendPropertyChanged("TUESDAY_FROM");
				this.OnTUESDAY_FROMChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TUESDAY_UNTIL", DbType="DateTime")]
	public System.Nullable<System.DateTime> TUESDAY_UNTIL
	{
		get
		{
			return this._TUESDAY_UNTIL;
		}
		set
		{
			if ((this._TUESDAY_UNTIL != value))
			{
				this.OnTUESDAY_UNTILChanging(value);
				this.SendPropertyChanging();
				this._TUESDAY_UNTIL = value;
				this.SendPropertyChanged("TUESDAY_UNTIL");
				this.OnTUESDAY_UNTILChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WEDNESDAY_FROM", DbType="DateTime")]
	public System.Nullable<System.DateTime> WEDNESDAY_FROM
	{
		get
		{
			return this._WEDNESDAY_FROM;
		}
		set
		{
			if ((this._WEDNESDAY_FROM != value))
			{
				this.OnWEDNESDAY_FROMChanging(value);
				this.SendPropertyChanging();
				this._WEDNESDAY_FROM = value;
				this.SendPropertyChanged("WEDNESDAY_FROM");
				this.OnWEDNESDAY_FROMChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WEDNESDAY_UNTIL", DbType="DateTime")]
	public System.Nullable<System.DateTime> WEDNESDAY_UNTIL
	{
		get
		{
			return this._WEDNESDAY_UNTIL;
		}
		set
		{
			if ((this._WEDNESDAY_UNTIL != value))
			{
				this.OnWEDNESDAY_UNTILChanging(value);
				this.SendPropertyChanging();
				this._WEDNESDAY_UNTIL = value;
				this.SendPropertyChanged("WEDNESDAY_UNTIL");
				this.OnWEDNESDAY_UNTILChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THURSDAY_FROM", DbType="DateTime")]
	public System.Nullable<System.DateTime> THURSDAY_FROM
	{
		get
		{
			return this._THURSDAY_FROM;
		}
		set
		{
			if ((this._THURSDAY_FROM != value))
			{
				this.OnTHURSDAY_FROMChanging(value);
				this.SendPropertyChanging();
				this._THURSDAY_FROM = value;
				this.SendPropertyChanged("THURSDAY_FROM");
				this.OnTHURSDAY_FROMChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THURSDAY_UNTIL", DbType="DateTime")]
	public System.Nullable<System.DateTime> THURSDAY_UNTIL
	{
		get
		{
			return this._THURSDAY_UNTIL;
		}
		set
		{
			if ((this._THURSDAY_UNTIL != value))
			{
				this.OnTHURSDAY_UNTILChanging(value);
				this.SendPropertyChanging();
				this._THURSDAY_UNTIL = value;
				this.SendPropertyChanged("THURSDAY_UNTIL");
				this.OnTHURSDAY_UNTILChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FRIDAY_FROM", DbType="DateTime")]
	public System.Nullable<System.DateTime> FRIDAY_FROM
	{
		get
		{
			return this._FRIDAY_FROM;
		}
		set
		{
			if ((this._FRIDAY_FROM != value))
			{
				this.OnFRIDAY_FROMChanging(value);
				this.SendPropertyChanging();
				this._FRIDAY_FROM = value;
				this.SendPropertyChanged("FRIDAY_FROM");
				this.OnFRIDAY_FROMChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FRIDAY_UNTIL", DbType="DateTime")]
	public System.Nullable<System.DateTime> FRIDAY_UNTIL
	{
		get
		{
			return this._FRIDAY_UNTIL;
		}
		set
		{
			if ((this._FRIDAY_UNTIL != value))
			{
				this.OnFRIDAY_UNTILChanging(value);
				this.SendPropertyChanging();
				this._FRIDAY_UNTIL = value;
				this.SendPropertyChanged("FRIDAY_UNTIL");
				this.OnFRIDAY_UNTILChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SATURDAY_FROM", DbType="DateTime")]
	public System.Nullable<System.DateTime> SATURDAY_FROM
	{
		get
		{
			return this._SATURDAY_FROM;
		}
		set
		{
			if ((this._SATURDAY_FROM != value))
			{
				this.OnSATURDAY_FROMChanging(value);
				this.SendPropertyChanging();
				this._SATURDAY_FROM = value;
				this.SendPropertyChanged("SATURDAY_FROM");
				this.OnSATURDAY_FROMChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SATURDAY_UNTIL", DbType="DateTime")]
	public System.Nullable<System.DateTime> SATURDAY_UNTIL
	{
		get
		{
			return this._SATURDAY_UNTIL;
		}
		set
		{
			if ((this._SATURDAY_UNTIL != value))
			{
				this.OnSATURDAY_UNTILChanging(value);
				this.SendPropertyChanging();
				this._SATURDAY_UNTIL = value;
				this.SendPropertyChanged("SATURDAY_UNTIL");
				this.OnSATURDAY_UNTILChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUNDAY_FROM", DbType="DateTime")]
	public System.Nullable<System.DateTime> SUNDAY_FROM
	{
		get
		{
			return this._SUNDAY_FROM;
		}
		set
		{
			if ((this._SUNDAY_FROM != value))
			{
				this.OnSUNDAY_FROMChanging(value);
				this.SendPropertyChanging();
				this._SUNDAY_FROM = value;
				this.SendPropertyChanged("SUNDAY_FROM");
				this.OnSUNDAY_FROMChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUNDAY_UNTIL", DbType="DateTime")]
	public System.Nullable<System.DateTime> SUNDAY_UNTIL
	{
		get
		{
			return this._SUNDAY_UNTIL;
		}
		set
		{
			if ((this._SUNDAY_UNTIL != value))
			{
				this.OnSUNDAY_UNTILChanging(value);
				this.SendPropertyChanging();
				this._SUNDAY_UNTIL = value;
				this.SendPropertyChanged("SUNDAY_UNTIL");
				this.OnSUNDAY_UNTILChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POST_ID", DbType="Int NOT NULL")]
	public int POST_ID
	{
		get
		{
			return this._POST_ID;
		}
		set
		{
			if ((this._POST_ID != value))
			{
				if (this._POST.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPOST_IDChanging(value);
				this.SendPropertyChanging();
				this._POST_ID = value;
				this.SendPropertyChanged("POST_ID");
				this.OnPOST_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MODE", DbType="VarChar(20)")]
	public string MODE
	{
		get
		{
			return this._MODE;
		}
		set
		{
			if ((this._MODE != value))
			{
				this.OnMODEChanging(value);
				this.SendPropertyChanging();
				this._MODE = value;
				this.SendPropertyChanged("MODE");
				this.OnMODEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POST_TEMPLATEGRAFTIME", Storage="_POST", ThisKey="POST_ID", OtherKey="POST_ID", IsForeignKey=true)]
	public POST POST
	{
		get
		{
			return this._POST.Entity;
		}
		set
		{
			POST previousValue = this._POST.Entity;
			if (((previousValue != value) 
						|| (this._POST.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._POST.Entity = null;
					previousValue.TEMPLATEGRAFTIMEs.Remove(this);
				}
				this._POST.Entity = value;
				if ((value != null))
				{
					value.TEMPLATEGRAFTIMEs.Add(this);
					this._POST_ID = value.POST_ID;
				}
				else
				{
					this._POST_ID = default(int);
				}
				this.SendPropertyChanged("POST");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
